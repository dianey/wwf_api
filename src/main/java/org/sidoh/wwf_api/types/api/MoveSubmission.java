/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class should be used to submit a move to the API. Note that you are not
 * required to compute the checksum, etc., so it's easier to use.
 */
public class MoveSubmission implements org.apache.thrift.TBase<MoveSubmission, MoveSubmission._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoveSubmission");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAY_START_FIELD_DESC = new org.apache.thrift.protocol.TField("playStart", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ORIENTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orientation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TILES_PLAYED_FIELD_DESC = new org.apache.thrift.protocol.TField("tilesPlayed", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MoveSubmissionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MoveSubmissionTupleSchemeFactory());
  }

  /**
   * 
   * @see MoveType
   */
  public MoveType type; // required
  /**
   * Only necessary for PLAY. The (x, y) coordinates for the first tile played
   * (either left-to-right or top-to-bottom).
   */
  public Coordinates playStart; // optional
  /**
   * Only necessary for PLAY. The orientation of the word played (either vertical
   * or horizontal).
   * 
   * @see org.sidoh.wwf_api.types.game_state.WordOrientation
   */
  public org.sidoh.wwf_api.types.game_state.WordOrientation orientation; // optional
  /**
   * If MoveType is PLAY or SWAP, then this should be a list of the tiles that were
   * included in the play. Note that this should only ever contain tiles that are in
   * the user's rack. If the move type is PLAY, they should be in the order that the
   * word was formed in, skipping tiles that were already on the board.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> tilesPlayed; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MoveType
     */
    TYPE((short)1, "type"),
    /**
     * Only necessary for PLAY. The (x, y) coordinates for the first tile played
     * (either left-to-right or top-to-bottom).
     */
    PLAY_START((short)2, "playStart"),
    /**
     * Only necessary for PLAY. The orientation of the word played (either vertical
     * or horizontal).
     * 
     * @see org.sidoh.wwf_api.types.game_state.WordOrientation
     */
    ORIENTATION((short)3, "orientation"),
    /**
     * If MoveType is PLAY or SWAP, then this should be a list of the tiles that were
     * included in the play. Note that this should only ever contain tiles that are in
     * the user's rack. If the move type is PLAY, they should be in the order that the
     * word was formed in, skipping tiles that were already on the board.
     */
    TILES_PLAYED((short)4, "tilesPlayed");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // PLAY_START
          return PLAY_START;
        case 3: // ORIENTATION
          return ORIENTATION;
        case 4: // TILES_PLAYED
          return TILES_PLAYED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PLAY_START,_Fields.ORIENTATION,_Fields.TILES_PLAYED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoveType.class)));
    tmpMap.put(_Fields.PLAY_START, new org.apache.thrift.meta_data.FieldMetaData("playStart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coordinates.class)));
    tmpMap.put(_Fields.ORIENTATION, new org.apache.thrift.meta_data.FieldMetaData("orientation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.sidoh.wwf_api.types.game_state.WordOrientation.class)));
    tmpMap.put(_Fields.TILES_PLAYED, new org.apache.thrift.meta_data.FieldMetaData("tilesPlayed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.sidoh.wwf_api.types.game_state.Tile.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoveSubmission.class, metaDataMap);
  }

  public MoveSubmission() {
  }

  public MoveSubmission(
    MoveType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoveSubmission(MoveSubmission other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPlayStart()) {
      this.playStart = new Coordinates(other.playStart);
    }
    if (other.isSetOrientation()) {
      this.orientation = other.orientation;
    }
    if (other.isSetTilesPlayed()) {
      List<org.sidoh.wwf_api.types.game_state.Tile> __this__tilesPlayed = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
      for (org.sidoh.wwf_api.types.game_state.Tile other_element : other.tilesPlayed) {
        __this__tilesPlayed.add(new org.sidoh.wwf_api.types.game_state.Tile(other_element));
      }
      this.tilesPlayed = __this__tilesPlayed;
    }
  }

  public MoveSubmission deepCopy() {
    return new MoveSubmission(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.playStart = null;
    this.orientation = null;
    this.tilesPlayed = null;
  }

  /**
   * 
   * @see MoveType
   */
  public MoveType getType() {
    return this.type;
  }

  /**
   * 
   * @see MoveType
   */
  public MoveSubmission setType(MoveType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * Only necessary for PLAY. The (x, y) coordinates for the first tile played
   * (either left-to-right or top-to-bottom).
   */
  public Coordinates getPlayStart() {
    return this.playStart;
  }

  /**
   * Only necessary for PLAY. The (x, y) coordinates for the first tile played
   * (either left-to-right or top-to-bottom).
   */
  public MoveSubmission setPlayStart(Coordinates playStart) {
    this.playStart = playStart;
    return this;
  }

  public void unsetPlayStart() {
    this.playStart = null;
  }

  /** Returns true if field playStart is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayStart() {
    return this.playStart != null;
  }

  public void setPlayStartIsSet(boolean value) {
    if (!value) {
      this.playStart = null;
    }
  }

  /**
   * Only necessary for PLAY. The orientation of the word played (either vertical
   * or horizontal).
   * 
   * @see org.sidoh.wwf_api.types.game_state.WordOrientation
   */
  public org.sidoh.wwf_api.types.game_state.WordOrientation getOrientation() {
    return this.orientation;
  }

  /**
   * Only necessary for PLAY. The orientation of the word played (either vertical
   * or horizontal).
   * 
   * @see org.sidoh.wwf_api.types.game_state.WordOrientation
   */
  public MoveSubmission setOrientation(org.sidoh.wwf_api.types.game_state.WordOrientation orientation) {
    this.orientation = orientation;
    return this;
  }

  public void unsetOrientation() {
    this.orientation = null;
  }

  /** Returns true if field orientation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrientation() {
    return this.orientation != null;
  }

  public void setOrientationIsSet(boolean value) {
    if (!value) {
      this.orientation = null;
    }
  }

  public int getTilesPlayedSize() {
    return (this.tilesPlayed == null) ? 0 : this.tilesPlayed.size();
  }

  public java.util.Iterator<org.sidoh.wwf_api.types.game_state.Tile> getTilesPlayedIterator() {
    return (this.tilesPlayed == null) ? null : this.tilesPlayed.iterator();
  }

  public void addToTilesPlayed(org.sidoh.wwf_api.types.game_state.Tile elem) {
    if (this.tilesPlayed == null) {
      this.tilesPlayed = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
    }
    this.tilesPlayed.add(elem);
  }

  /**
   * If MoveType is PLAY or SWAP, then this should be a list of the tiles that were
   * included in the play. Note that this should only ever contain tiles that are in
   * the user's rack. If the move type is PLAY, they should be in the order that the
   * word was formed in, skipping tiles that were already on the board.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> getTilesPlayed() {
    return this.tilesPlayed;
  }

  /**
   * If MoveType is PLAY or SWAP, then this should be a list of the tiles that were
   * included in the play. Note that this should only ever contain tiles that are in
   * the user's rack. If the move type is PLAY, they should be in the order that the
   * word was formed in, skipping tiles that were already on the board.
   */
  public MoveSubmission setTilesPlayed(List<org.sidoh.wwf_api.types.game_state.Tile> tilesPlayed) {
    this.tilesPlayed = tilesPlayed;
    return this;
  }

  public void unsetTilesPlayed() {
    this.tilesPlayed = null;
  }

  /** Returns true if field tilesPlayed is set (has been assigned a value) and false otherwise */
  public boolean isSetTilesPlayed() {
    return this.tilesPlayed != null;
  }

  public void setTilesPlayedIsSet(boolean value) {
    if (!value) {
      this.tilesPlayed = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MoveType)value);
      }
      break;

    case PLAY_START:
      if (value == null) {
        unsetPlayStart();
      } else {
        setPlayStart((Coordinates)value);
      }
      break;

    case ORIENTATION:
      if (value == null) {
        unsetOrientation();
      } else {
        setOrientation((org.sidoh.wwf_api.types.game_state.WordOrientation)value);
      }
      break;

    case TILES_PLAYED:
      if (value == null) {
        unsetTilesPlayed();
      } else {
        setTilesPlayed((List<org.sidoh.wwf_api.types.game_state.Tile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case PLAY_START:
      return getPlayStart();

    case ORIENTATION:
      return getOrientation();

    case TILES_PLAYED:
      return getTilesPlayed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case PLAY_START:
      return isSetPlayStart();
    case ORIENTATION:
      return isSetOrientation();
    case TILES_PLAYED:
      return isSetTilesPlayed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoveSubmission)
      return this.equals((MoveSubmission)that);
    return false;
  }

  public boolean equals(MoveSubmission that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_playStart = true && this.isSetPlayStart();
    boolean that_present_playStart = true && that.isSetPlayStart();
    if (this_present_playStart || that_present_playStart) {
      if (!(this_present_playStart && that_present_playStart))
        return false;
      if (!this.playStart.equals(that.playStart))
        return false;
    }

    boolean this_present_orientation = true && this.isSetOrientation();
    boolean that_present_orientation = true && that.isSetOrientation();
    if (this_present_orientation || that_present_orientation) {
      if (!(this_present_orientation && that_present_orientation))
        return false;
      if (!this.orientation.equals(that.orientation))
        return false;
    }

    boolean this_present_tilesPlayed = true && this.isSetTilesPlayed();
    boolean that_present_tilesPlayed = true && that.isSetTilesPlayed();
    if (this_present_tilesPlayed || that_present_tilesPlayed) {
      if (!(this_present_tilesPlayed && that_present_tilesPlayed))
        return false;
      if (!this.tilesPlayed.equals(that.tilesPlayed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MoveSubmission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MoveSubmission typedOther = (MoveSubmission)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayStart()).compareTo(typedOther.isSetPlayStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playStart, typedOther.playStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrientation()).compareTo(typedOther.isSetOrientation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrientation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientation, typedOther.orientation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTilesPlayed()).compareTo(typedOther.isSetTilesPlayed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTilesPlayed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tilesPlayed, typedOther.tilesPlayed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoveSubmission(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetPlayStart()) {
      if (!first) sb.append(", ");
      sb.append("playStart:");
      if (this.playStart == null) {
        sb.append("null");
      } else {
        sb.append(this.playStart);
      }
      first = false;
    }
    if (isSetOrientation()) {
      if (!first) sb.append(", ");
      sb.append("orientation:");
      if (this.orientation == null) {
        sb.append("null");
      } else {
        sb.append(this.orientation);
      }
      first = false;
    }
    if (isSetTilesPlayed()) {
      if (!first) sb.append(", ");
      sb.append("tilesPlayed:");
      if (this.tilesPlayed == null) {
        sb.append("null");
      } else {
        sb.append(this.tilesPlayed);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MoveSubmissionStandardSchemeFactory implements SchemeFactory {
    public MoveSubmissionStandardScheme getScheme() {
      return new MoveSubmissionStandardScheme();
    }
  }

  private static class MoveSubmissionStandardScheme extends StandardScheme<MoveSubmission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MoveSubmission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MoveType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAY_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.playStart = new Coordinates();
              struct.playStart.read(iprot);
              struct.setPlayStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIENTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orientation = org.sidoh.wwf_api.types.game_state.WordOrientation.findByValue(iprot.readI32());
              struct.setOrientationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TILES_PLAYED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.tilesPlayed = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  org.sidoh.wwf_api.types.game_state.Tile _elem18; // required
                  _elem18 = new org.sidoh.wwf_api.types.game_state.Tile();
                  _elem18.read(iprot);
                  struct.tilesPlayed.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setTilesPlayedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MoveSubmission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.playStart != null) {
        if (struct.isSetPlayStart()) {
          oprot.writeFieldBegin(PLAY_START_FIELD_DESC);
          struct.playStart.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orientation != null) {
        if (struct.isSetOrientation()) {
          oprot.writeFieldBegin(ORIENTATION_FIELD_DESC);
          oprot.writeI32(struct.orientation.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tilesPlayed != null) {
        if (struct.isSetTilesPlayed()) {
          oprot.writeFieldBegin(TILES_PLAYED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tilesPlayed.size()));
            for (org.sidoh.wwf_api.types.game_state.Tile _iter19 : struct.tilesPlayed)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MoveSubmissionTupleSchemeFactory implements SchemeFactory {
    public MoveSubmissionTupleScheme getScheme() {
      return new MoveSubmissionTupleScheme();
    }
  }

  private static class MoveSubmissionTupleScheme extends TupleScheme<MoveSubmission> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MoveSubmission struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPlayStart()) {
        optionals.set(0);
      }
      if (struct.isSetOrientation()) {
        optionals.set(1);
      }
      if (struct.isSetTilesPlayed()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayStart()) {
        struct.playStart.write(oprot);
      }
      if (struct.isSetOrientation()) {
        oprot.writeI32(struct.orientation.getValue());
      }
      if (struct.isSetTilesPlayed()) {
        {
          oprot.writeI32(struct.tilesPlayed.size());
          for (org.sidoh.wwf_api.types.game_state.Tile _iter20 : struct.tilesPlayed)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MoveSubmission struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = MoveType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.playStart = new Coordinates();
        struct.playStart.read(iprot);
        struct.setPlayStartIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orientation = org.sidoh.wwf_api.types.game_state.WordOrientation.findByValue(iprot.readI32());
        struct.setOrientationIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tilesPlayed = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            org.sidoh.wwf_api.types.game_state.Tile _elem23; // required
            _elem23 = new org.sidoh.wwf_api.types.game_state.Tile();
            _elem23.read(iprot);
            struct.tilesPlayed.add(_elem23);
          }
        }
        struct.setTilesPlayedIsSet(true);
      }
    }
  }

}

