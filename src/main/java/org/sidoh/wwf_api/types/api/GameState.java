/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Gets extended information about a single game
 */
public class GameState implements org.apache.thrift.TBase<GameState, GameState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameState");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_MOVES_FIELD_DESC = new org.apache.thrift.protocol.TField("allMoves", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RACKS_FIELD_DESC = new org.apache.thrift.protocol.TField("racks", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("scores", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REMAINING_TILES_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingTiles", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHAT_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("chatMessages", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameStateTupleSchemeFactory());
  }

  public long id; // required
  /**
   * A list of all of the moves made.
   */
  public List<Move> allMoves; // required
  /**
   * Map telling you the racks for each user (keyed by user id)
   */
  public Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>> racks; // required
  /**
   * The game board. Access (row, column) by row*15 + col. A blank slot will be
   * filled with null. List guaranteed to contain exactly 225 (15 * 15) values.
   */
  public List<org.sidoh.wwf_api.types.game_state.Slot> board; // required
  /**
   * Scores by user ID
   */
  public Map<Long,Integer> scores; // required
  /**
   * All of the meta-information about this game state
   */
  public GameMeta meta; // required
  /**
   * List of the tiles remaining. The order of the tiles is guaranteed to be in the order that they'll
   * be retreived assuming no SWAP moves, which effectively shuffles the list.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> remainingTiles; // required
  /**
   * All chat messages for this game
   */
  public List<ChatMessage> chatMessages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * A list of all of the moves made.
     */
    ALL_MOVES((short)2, "allMoves"),
    /**
     * Map telling you the racks for each user (keyed by user id)
     */
    RACKS((short)3, "racks"),
    /**
     * The game board. Access (row, column) by row*15 + col. A blank slot will be
     * filled with null. List guaranteed to contain exactly 225 (15 * 15) values.
     */
    BOARD((short)4, "board"),
    /**
     * Scores by user ID
     */
    SCORES((short)5, "scores"),
    /**
     * All of the meta-information about this game state
     */
    META((short)6, "meta"),
    /**
     * List of the tiles remaining. The order of the tiles is guaranteed to be in the order that they'll
     * be retreived assuming no SWAP moves, which effectively shuffles the list.
     */
    REMAINING_TILES((short)7, "remainingTiles"),
    /**
     * All chat messages for this game
     */
    CHAT_MESSAGES((short)8, "chatMessages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ALL_MOVES
          return ALL_MOVES;
        case 3: // RACKS
          return RACKS;
        case 4: // BOARD
          return BOARD;
        case 5: // SCORES
          return SCORES;
        case 6: // META
          return META;
        case 7: // REMAINING_TILES
          return REMAINING_TILES;
        case 8: // CHAT_MESSAGES
          return CHAT_MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALL_MOVES, new org.apache.thrift.meta_data.FieldMetaData("allMoves", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Move.class))));
    tmpMap.put(_Fields.RACKS, new org.apache.thrift.meta_data.FieldMetaData("racks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.sidoh.wwf_api.types.game_state.Tile.class)))));
    tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.sidoh.wwf_api.types.game_state.Slot.class))));
    tmpMap.put(_Fields.SCORES, new org.apache.thrift.meta_data.FieldMetaData("scores", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameMeta.class)));
    tmpMap.put(_Fields.REMAINING_TILES, new org.apache.thrift.meta_data.FieldMetaData("remainingTiles", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.sidoh.wwf_api.types.game_state.Tile.class))));
    tmpMap.put(_Fields.CHAT_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("chatMessages", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMessage.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameState.class, metaDataMap);
  }

  public GameState() {
  }

  public GameState(
    long id,
    List<Move> allMoves,
    Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>> racks,
    List<org.sidoh.wwf_api.types.game_state.Slot> board,
    Map<Long,Integer> scores,
    GameMeta meta,
    List<org.sidoh.wwf_api.types.game_state.Tile> remainingTiles,
    List<ChatMessage> chatMessages)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.allMoves = allMoves;
    this.racks = racks;
    this.board = board;
    this.scores = scores;
    this.meta = meta;
    this.remainingTiles = remainingTiles;
    this.chatMessages = chatMessages;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameState(GameState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetAllMoves()) {
      List<Move> __this__allMoves = new ArrayList<Move>();
      for (Move other_element : other.allMoves) {
        __this__allMoves.add(new Move(other_element));
      }
      this.allMoves = __this__allMoves;
    }
    if (other.isSetRacks()) {
      Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>> __this__racks = new HashMap<Long,List<org.sidoh.wwf_api.types.game_state.Tile>>();
      for (Map.Entry<Long, List<org.sidoh.wwf_api.types.game_state.Tile>> other_element : other.racks.entrySet()) {

        Long other_element_key = other_element.getKey();
        List<org.sidoh.wwf_api.types.game_state.Tile> other_element_value = other_element.getValue();

        Long __this__racks_copy_key = other_element_key;

        List<org.sidoh.wwf_api.types.game_state.Tile> __this__racks_copy_value = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
        for (org.sidoh.wwf_api.types.game_state.Tile other_element_value_element : other_element_value) {
          __this__racks_copy_value.add(new org.sidoh.wwf_api.types.game_state.Tile(other_element_value_element));
        }

        __this__racks.put(__this__racks_copy_key, __this__racks_copy_value);
      }
      this.racks = __this__racks;
    }
    if (other.isSetBoard()) {
      List<org.sidoh.wwf_api.types.game_state.Slot> __this__board = new ArrayList<org.sidoh.wwf_api.types.game_state.Slot>();
      for (org.sidoh.wwf_api.types.game_state.Slot other_element : other.board) {
        __this__board.add(new org.sidoh.wwf_api.types.game_state.Slot(other_element));
      }
      this.board = __this__board;
    }
    if (other.isSetScores()) {
      Map<Long,Integer> __this__scores = new HashMap<Long,Integer>();
      for (Map.Entry<Long, Integer> other_element : other.scores.entrySet()) {

        Long other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Long __this__scores_copy_key = other_element_key;

        Integer __this__scores_copy_value = other_element_value;

        __this__scores.put(__this__scores_copy_key, __this__scores_copy_value);
      }
      this.scores = __this__scores;
    }
    if (other.isSetMeta()) {
      this.meta = new GameMeta(other.meta);
    }
    if (other.isSetRemainingTiles()) {
      List<org.sidoh.wwf_api.types.game_state.Tile> __this__remainingTiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
      for (org.sidoh.wwf_api.types.game_state.Tile other_element : other.remainingTiles) {
        __this__remainingTiles.add(new org.sidoh.wwf_api.types.game_state.Tile(other_element));
      }
      this.remainingTiles = __this__remainingTiles;
    }
    if (other.isSetChatMessages()) {
      List<ChatMessage> __this__chatMessages = new ArrayList<ChatMessage>();
      for (ChatMessage other_element : other.chatMessages) {
        __this__chatMessages.add(new ChatMessage(other_element));
      }
      this.chatMessages = __this__chatMessages;
    }
  }

  public GameState deepCopy() {
    return new GameState(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.allMoves = null;
    this.racks = null;
    this.board = null;
    this.scores = null;
    this.meta = null;
    this.remainingTiles = null;
    this.chatMessages = null;
  }

  public long getId() {
    return this.id;
  }

  public GameState setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getAllMovesSize() {
    return (this.allMoves == null) ? 0 : this.allMoves.size();
  }

  public java.util.Iterator<Move> getAllMovesIterator() {
    return (this.allMoves == null) ? null : this.allMoves.iterator();
  }

  public void addToAllMoves(Move elem) {
    if (this.allMoves == null) {
      this.allMoves = new ArrayList<Move>();
    }
    this.allMoves.add(elem);
  }

  /**
   * A list of all of the moves made.
   */
  public List<Move> getAllMoves() {
    return this.allMoves;
  }

  /**
   * A list of all of the moves made.
   */
  public GameState setAllMoves(List<Move> allMoves) {
    this.allMoves = allMoves;
    return this;
  }

  public void unsetAllMoves() {
    this.allMoves = null;
  }

  /** Returns true if field allMoves is set (has been assigned a value) and false otherwise */
  public boolean isSetAllMoves() {
    return this.allMoves != null;
  }

  public void setAllMovesIsSet(boolean value) {
    if (!value) {
      this.allMoves = null;
    }
  }

  public int getRacksSize() {
    return (this.racks == null) ? 0 : this.racks.size();
  }

  public void putToRacks(long key, List<org.sidoh.wwf_api.types.game_state.Tile> val) {
    if (this.racks == null) {
      this.racks = new HashMap<Long,List<org.sidoh.wwf_api.types.game_state.Tile>>();
    }
    this.racks.put(key, val);
  }

  /**
   * Map telling you the racks for each user (keyed by user id)
   */
  public Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>> getRacks() {
    return this.racks;
  }

  /**
   * Map telling you the racks for each user (keyed by user id)
   */
  public GameState setRacks(Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>> racks) {
    this.racks = racks;
    return this;
  }

  public void unsetRacks() {
    this.racks = null;
  }

  /** Returns true if field racks is set (has been assigned a value) and false otherwise */
  public boolean isSetRacks() {
    return this.racks != null;
  }

  public void setRacksIsSet(boolean value) {
    if (!value) {
      this.racks = null;
    }
  }

  public int getBoardSize() {
    return (this.board == null) ? 0 : this.board.size();
  }

  public java.util.Iterator<org.sidoh.wwf_api.types.game_state.Slot> getBoardIterator() {
    return (this.board == null) ? null : this.board.iterator();
  }

  public void addToBoard(org.sidoh.wwf_api.types.game_state.Slot elem) {
    if (this.board == null) {
      this.board = new ArrayList<org.sidoh.wwf_api.types.game_state.Slot>();
    }
    this.board.add(elem);
  }

  /**
   * The game board. Access (row, column) by row*15 + col. A blank slot will be
   * filled with null. List guaranteed to contain exactly 225 (15 * 15) values.
   */
  public List<org.sidoh.wwf_api.types.game_state.Slot> getBoard() {
    return this.board;
  }

  /**
   * The game board. Access (row, column) by row*15 + col. A blank slot will be
   * filled with null. List guaranteed to contain exactly 225 (15 * 15) values.
   */
  public GameState setBoard(List<org.sidoh.wwf_api.types.game_state.Slot> board) {
    this.board = board;
    return this;
  }

  public void unsetBoard() {
    this.board = null;
  }

  /** Returns true if field board is set (has been assigned a value) and false otherwise */
  public boolean isSetBoard() {
    return this.board != null;
  }

  public void setBoardIsSet(boolean value) {
    if (!value) {
      this.board = null;
    }
  }

  public int getScoresSize() {
    return (this.scores == null) ? 0 : this.scores.size();
  }

  public void putToScores(long key, int val) {
    if (this.scores == null) {
      this.scores = new HashMap<Long,Integer>();
    }
    this.scores.put(key, val);
  }

  /**
   * Scores by user ID
   */
  public Map<Long,Integer> getScores() {
    return this.scores;
  }

  /**
   * Scores by user ID
   */
  public GameState setScores(Map<Long,Integer> scores) {
    this.scores = scores;
    return this;
  }

  public void unsetScores() {
    this.scores = null;
  }

  /** Returns true if field scores is set (has been assigned a value) and false otherwise */
  public boolean isSetScores() {
    return this.scores != null;
  }

  public void setScoresIsSet(boolean value) {
    if (!value) {
      this.scores = null;
    }
  }

  /**
   * All of the meta-information about this game state
   */
  public GameMeta getMeta() {
    return this.meta;
  }

  /**
   * All of the meta-information about this game state
   */
  public GameState setMeta(GameMeta meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public int getRemainingTilesSize() {
    return (this.remainingTiles == null) ? 0 : this.remainingTiles.size();
  }

  public java.util.Iterator<org.sidoh.wwf_api.types.game_state.Tile> getRemainingTilesIterator() {
    return (this.remainingTiles == null) ? null : this.remainingTiles.iterator();
  }

  public void addToRemainingTiles(org.sidoh.wwf_api.types.game_state.Tile elem) {
    if (this.remainingTiles == null) {
      this.remainingTiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>();
    }
    this.remainingTiles.add(elem);
  }

  /**
   * List of the tiles remaining. The order of the tiles is guaranteed to be in the order that they'll
   * be retreived assuming no SWAP moves, which effectively shuffles the list.
   */
  public List<org.sidoh.wwf_api.types.game_state.Tile> getRemainingTiles() {
    return this.remainingTiles;
  }

  /**
   * List of the tiles remaining. The order of the tiles is guaranteed to be in the order that they'll
   * be retreived assuming no SWAP moves, which effectively shuffles the list.
   */
  public GameState setRemainingTiles(List<org.sidoh.wwf_api.types.game_state.Tile> remainingTiles) {
    this.remainingTiles = remainingTiles;
    return this;
  }

  public void unsetRemainingTiles() {
    this.remainingTiles = null;
  }

  /** Returns true if field remainingTiles is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingTiles() {
    return this.remainingTiles != null;
  }

  public void setRemainingTilesIsSet(boolean value) {
    if (!value) {
      this.remainingTiles = null;
    }
  }

  public int getChatMessagesSize() {
    return (this.chatMessages == null) ? 0 : this.chatMessages.size();
  }

  public java.util.Iterator<ChatMessage> getChatMessagesIterator() {
    return (this.chatMessages == null) ? null : this.chatMessages.iterator();
  }

  public void addToChatMessages(ChatMessage elem) {
    if (this.chatMessages == null) {
      this.chatMessages = new ArrayList<ChatMessage>();
    }
    this.chatMessages.add(elem);
  }

  /**
   * All chat messages for this game
   */
  public List<ChatMessage> getChatMessages() {
    return this.chatMessages;
  }

  /**
   * All chat messages for this game
   */
  public GameState setChatMessages(List<ChatMessage> chatMessages) {
    this.chatMessages = chatMessages;
    return this;
  }

  public void unsetChatMessages() {
    this.chatMessages = null;
  }

  /** Returns true if field chatMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetChatMessages() {
    return this.chatMessages != null;
  }

  public void setChatMessagesIsSet(boolean value) {
    if (!value) {
      this.chatMessages = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ALL_MOVES:
      if (value == null) {
        unsetAllMoves();
      } else {
        setAllMoves((List<Move>)value);
      }
      break;

    case RACKS:
      if (value == null) {
        unsetRacks();
      } else {
        setRacks((Map<Long,List<org.sidoh.wwf_api.types.game_state.Tile>>)value);
      }
      break;

    case BOARD:
      if (value == null) {
        unsetBoard();
      } else {
        setBoard((List<org.sidoh.wwf_api.types.game_state.Slot>)value);
      }
      break;

    case SCORES:
      if (value == null) {
        unsetScores();
      } else {
        setScores((Map<Long,Integer>)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((GameMeta)value);
      }
      break;

    case REMAINING_TILES:
      if (value == null) {
        unsetRemainingTiles();
      } else {
        setRemainingTiles((List<org.sidoh.wwf_api.types.game_state.Tile>)value);
      }
      break;

    case CHAT_MESSAGES:
      if (value == null) {
        unsetChatMessages();
      } else {
        setChatMessages((List<ChatMessage>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case ALL_MOVES:
      return getAllMoves();

    case RACKS:
      return getRacks();

    case BOARD:
      return getBoard();

    case SCORES:
      return getScores();

    case META:
      return getMeta();

    case REMAINING_TILES:
      return getRemainingTiles();

    case CHAT_MESSAGES:
      return getChatMessages();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ALL_MOVES:
      return isSetAllMoves();
    case RACKS:
      return isSetRacks();
    case BOARD:
      return isSetBoard();
    case SCORES:
      return isSetScores();
    case META:
      return isSetMeta();
    case REMAINING_TILES:
      return isSetRemainingTiles();
    case CHAT_MESSAGES:
      return isSetChatMessages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameState)
      return this.equals((GameState)that);
    return false;
  }

  public boolean equals(GameState that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_allMoves = true && this.isSetAllMoves();
    boolean that_present_allMoves = true && that.isSetAllMoves();
    if (this_present_allMoves || that_present_allMoves) {
      if (!(this_present_allMoves && that_present_allMoves))
        return false;
      if (!this.allMoves.equals(that.allMoves))
        return false;
    }

    boolean this_present_racks = true && this.isSetRacks();
    boolean that_present_racks = true && that.isSetRacks();
    if (this_present_racks || that_present_racks) {
      if (!(this_present_racks && that_present_racks))
        return false;
      if (!this.racks.equals(that.racks))
        return false;
    }

    boolean this_present_board = true && this.isSetBoard();
    boolean that_present_board = true && that.isSetBoard();
    if (this_present_board || that_present_board) {
      if (!(this_present_board && that_present_board))
        return false;
      if (!this.board.equals(that.board))
        return false;
    }

    boolean this_present_scores = true && this.isSetScores();
    boolean that_present_scores = true && that.isSetScores();
    if (this_present_scores || that_present_scores) {
      if (!(this_present_scores && that_present_scores))
        return false;
      if (!this.scores.equals(that.scores))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_remainingTiles = true && this.isSetRemainingTiles();
    boolean that_present_remainingTiles = true && that.isSetRemainingTiles();
    if (this_present_remainingTiles || that_present_remainingTiles) {
      if (!(this_present_remainingTiles && that_present_remainingTiles))
        return false;
      if (!this.remainingTiles.equals(that.remainingTiles))
        return false;
    }

    boolean this_present_chatMessages = true && this.isSetChatMessages();
    boolean that_present_chatMessages = true && that.isSetChatMessages();
    if (this_present_chatMessages || that_present_chatMessages) {
      if (!(this_present_chatMessages && that_present_chatMessages))
        return false;
      if (!this.chatMessages.equals(that.chatMessages))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GameState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GameState typedOther = (GameState)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllMoves()).compareTo(typedOther.isSetAllMoves());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllMoves()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allMoves, typedOther.allMoves);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRacks()).compareTo(typedOther.isSetRacks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRacks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.racks, typedOther.racks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoard()).compareTo(typedOther.isSetBoard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, typedOther.board);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScores()).compareTo(typedOther.isSetScores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scores, typedOther.scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeta()).compareTo(typedOther.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, typedOther.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingTiles()).compareTo(typedOther.isSetRemainingTiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingTiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingTiles, typedOther.remainingTiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatMessages()).compareTo(typedOther.isSetChatMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatMessages, typedOther.chatMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameState(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allMoves:");
    if (this.allMoves == null) {
      sb.append("null");
    } else {
      sb.append(this.allMoves);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("racks:");
    if (this.racks == null) {
      sb.append("null");
    } else {
      sb.append(this.racks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("board:");
    if (this.board == null) {
      sb.append("null");
    } else {
      sb.append(this.board);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scores:");
    if (this.scores == null) {
      sb.append("null");
    } else {
      sb.append(this.scores);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meta:");
    if (this.meta == null) {
      sb.append("null");
    } else {
      sb.append(this.meta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingTiles:");
    if (this.remainingTiles == null) {
      sb.append("null");
    } else {
      sb.append(this.remainingTiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatMessages:");
    if (this.chatMessages == null) {
      sb.append("null");
    } else {
      sb.append(this.chatMessages);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (allMoves == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'allMoves' was not present! Struct: " + toString());
    }
    if (racks == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'racks' was not present! Struct: " + toString());
    }
    if (board == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'board' was not present! Struct: " + toString());
    }
    if (scores == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scores' was not present! Struct: " + toString());
    }
    if (meta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'meta' was not present! Struct: " + toString());
    }
    if (remainingTiles == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'remainingTiles' was not present! Struct: " + toString());
    }
    if (chatMessages == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'chatMessages' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameStateStandardSchemeFactory implements SchemeFactory {
    public GameStateStandardScheme getScheme() {
      return new GameStateStandardScheme();
    }
  }

  private static class GameStateStandardScheme extends StandardScheme<GameState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_MOVES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.allMoves = new ArrayList<Move>(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  Move _elem44; // required
                  _elem44 = new Move();
                  _elem44.read(iprot);
                  struct.allMoves.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setAllMovesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RACKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin();
                struct.racks = new HashMap<Long,List<org.sidoh.wwf_api.types.game_state.Tile>>(2*_map45.size);
                for (int _i46 = 0; _i46 < _map45.size; ++_i46)
                {
                  long _key47; // required
                  List<org.sidoh.wwf_api.types.game_state.Tile> _val48; // optional
                  _key47 = iprot.readI64();
                  {
                    org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                    _val48 = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list49.size);
                    for (int _i50 = 0; _i50 < _list49.size; ++_i50)
                    {
                      org.sidoh.wwf_api.types.game_state.Tile _elem51; // required
                      _elem51 = new org.sidoh.wwf_api.types.game_state.Tile();
                      _elem51.read(iprot);
                      _val48.add(_elem51);
                    }
                    iprot.readListEnd();
                  }
                  struct.racks.put(_key47, _val48);
                }
                iprot.readMapEnd();
              }
              struct.setRacksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOARD
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.board = new ArrayList<org.sidoh.wwf_api.types.game_state.Slot>(_list52.size);
                for (int _i53 = 0; _i53 < _list52.size; ++_i53)
                {
                  org.sidoh.wwf_api.types.game_state.Slot _elem54; // required
                  _elem54 = new org.sidoh.wwf_api.types.game_state.Slot();
                  _elem54.read(iprot);
                  struct.board.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setBoardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
                struct.scores = new HashMap<Long,Integer>(2*_map55.size);
                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
                {
                  long _key57; // required
                  int _val58; // optional
                  _key57 = iprot.readI64();
                  _val58 = iprot.readI32();
                  struct.scores.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setScoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.meta = new GameMeta();
              struct.meta.read(iprot);
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMAINING_TILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                struct.remainingTiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list59.size);
                for (int _i60 = 0; _i60 < _list59.size; ++_i60)
                {
                  org.sidoh.wwf_api.types.game_state.Tile _elem61; // required
                  _elem61 = new org.sidoh.wwf_api.types.game_state.Tile();
                  _elem61.read(iprot);
                  struct.remainingTiles.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setRemainingTilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHAT_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                struct.chatMessages = new ArrayList<ChatMessage>(_list62.size);
                for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                {
                  ChatMessage _elem64; // required
                  _elem64 = new ChatMessage();
                  _elem64.read(iprot);
                  struct.chatMessages.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setChatMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.allMoves != null) {
        oprot.writeFieldBegin(ALL_MOVES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.allMoves.size()));
          for (Move _iter65 : struct.allMoves)
          {
            _iter65.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.racks != null) {
        oprot.writeFieldBegin(RACKS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.racks.size()));
          for (Map.Entry<Long, List<org.sidoh.wwf_api.types.game_state.Tile>> _iter66 : struct.racks.entrySet())
          {
            oprot.writeI64(_iter66.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter66.getValue().size()));
              for (org.sidoh.wwf_api.types.game_state.Tile _iter67 : _iter66.getValue())
              {
                _iter67.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.board != null) {
        oprot.writeFieldBegin(BOARD_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.board.size()));
          for (org.sidoh.wwf_api.types.game_state.Slot _iter68 : struct.board)
          {
            _iter68.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.scores != null) {
        oprot.writeFieldBegin(SCORES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.scores.size()));
          for (Map.Entry<Long, Integer> _iter69 : struct.scores.entrySet())
          {
            oprot.writeI64(_iter69.getKey());
            oprot.writeI32(_iter69.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.meta != null) {
        oprot.writeFieldBegin(META_FIELD_DESC);
        struct.meta.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remainingTiles != null) {
        oprot.writeFieldBegin(REMAINING_TILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.remainingTiles.size()));
          for (org.sidoh.wwf_api.types.game_state.Tile _iter70 : struct.remainingTiles)
          {
            _iter70.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.chatMessages != null) {
        oprot.writeFieldBegin(CHAT_MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.chatMessages.size()));
          for (ChatMessage _iter71 : struct.chatMessages)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameStateTupleSchemeFactory implements SchemeFactory {
    public GameStateTupleScheme getScheme() {
      return new GameStateTupleScheme();
    }
  }

  private static class GameStateTupleScheme extends TupleScheme<GameState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      {
        oprot.writeI32(struct.allMoves.size());
        for (Move _iter72 : struct.allMoves)
        {
          _iter72.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.racks.size());
        for (Map.Entry<Long, List<org.sidoh.wwf_api.types.game_state.Tile>> _iter73 : struct.racks.entrySet())
        {
          oprot.writeI64(_iter73.getKey());
          {
            oprot.writeI32(_iter73.getValue().size());
            for (org.sidoh.wwf_api.types.game_state.Tile _iter74 : _iter73.getValue())
            {
              _iter74.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.board.size());
        for (org.sidoh.wwf_api.types.game_state.Slot _iter75 : struct.board)
        {
          _iter75.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.scores.size());
        for (Map.Entry<Long, Integer> _iter76 : struct.scores.entrySet())
        {
          oprot.writeI64(_iter76.getKey());
          oprot.writeI32(_iter76.getValue());
        }
      }
      struct.meta.write(oprot);
      {
        oprot.writeI32(struct.remainingTiles.size());
        for (org.sidoh.wwf_api.types.game_state.Tile _iter77 : struct.remainingTiles)
        {
          _iter77.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.chatMessages.size());
        for (ChatMessage _iter78 : struct.chatMessages)
        {
          _iter78.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.allMoves = new ArrayList<Move>(_list79.size);
        for (int _i80 = 0; _i80 < _list79.size; ++_i80)
        {
          Move _elem81; // required
          _elem81 = new Move();
          _elem81.read(iprot);
          struct.allMoves.add(_elem81);
        }
      }
      struct.setAllMovesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.racks = new HashMap<Long,List<org.sidoh.wwf_api.types.game_state.Tile>>(2*_map82.size);
        for (int _i83 = 0; _i83 < _map82.size; ++_i83)
        {
          long _key84; // required
          List<org.sidoh.wwf_api.types.game_state.Tile> _val85; // optional
          _key84 = iprot.readI64();
          {
            org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val85 = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list86.size);
            for (int _i87 = 0; _i87 < _list86.size; ++_i87)
            {
              org.sidoh.wwf_api.types.game_state.Tile _elem88; // required
              _elem88 = new org.sidoh.wwf_api.types.game_state.Tile();
              _elem88.read(iprot);
              _val85.add(_elem88);
            }
          }
          struct.racks.put(_key84, _val85);
        }
      }
      struct.setRacksIsSet(true);
      {
        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.board = new ArrayList<org.sidoh.wwf_api.types.game_state.Slot>(_list89.size);
        for (int _i90 = 0; _i90 < _list89.size; ++_i90)
        {
          org.sidoh.wwf_api.types.game_state.Slot _elem91; // required
          _elem91 = new org.sidoh.wwf_api.types.game_state.Slot();
          _elem91.read(iprot);
          struct.board.add(_elem91);
        }
      }
      struct.setBoardIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.scores = new HashMap<Long,Integer>(2*_map92.size);
        for (int _i93 = 0; _i93 < _map92.size; ++_i93)
        {
          long _key94; // required
          int _val95; // optional
          _key94 = iprot.readI64();
          _val95 = iprot.readI32();
          struct.scores.put(_key94, _val95);
        }
      }
      struct.setScoresIsSet(true);
      struct.meta = new GameMeta();
      struct.meta.read(iprot);
      struct.setMetaIsSet(true);
      {
        org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.remainingTiles = new ArrayList<org.sidoh.wwf_api.types.game_state.Tile>(_list96.size);
        for (int _i97 = 0; _i97 < _list96.size; ++_i97)
        {
          org.sidoh.wwf_api.types.game_state.Tile _elem98; // required
          _elem98 = new org.sidoh.wwf_api.types.game_state.Tile();
          _elem98.read(iprot);
          struct.remainingTiles.add(_elem98);
        }
      }
      struct.setRemainingTilesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.chatMessages = new ArrayList<ChatMessage>(_list99.size);
        for (int _i100 = 0; _i100 < _list99.size; ++_i100)
        {
          ChatMessage _elem101; // required
          _elem101 = new ChatMessage();
          _elem101.read(iprot);
          struct.chatMessages.add(_elem101);
        }
      }
      struct.setChatMessagesIsSet(true);
    }
  }

}

