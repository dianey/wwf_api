/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Encapsulates metadata about a single game
 */
public class GameMeta implements org.apache.thrift.TBase<GameMeta, GameMeta._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GameMeta");

  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_BY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createdByUserId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_MOVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMoveUserId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MATCHMAKING_FIELD_DESC = new org.apache.thrift.protocol.TField("matchmaking", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OVER_FIELD_DESC = new org.apache.thrift.protocol.TField("over", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMove", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField OPPONENT_PRESENT_FIELD_DESC = new org.apache.thrift.protocol.TField("opponentPresent", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField RANDOM_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("randomSeed", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField USERS_BY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("usersById", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField UNREAD_CHAT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("unreadChatIds", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GameMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GameMetaTupleSchemeFactory());
  }

  public String createdAt; // required
  public long createdByUserId; // required
  public long currentMoveUserId; // optional
  public long id; // required
  public boolean matchmaking; // required
  public boolean over; // required
  public Move lastMove; // optional
  public boolean opponentPresent; // required
  public long randomSeed; // required
  public Map<Long,User> usersById; // required
  public List<Long> unreadChatIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATED_AT((short)1, "createdAt"),
    CREATED_BY_USER_ID((short)2, "createdByUserId"),
    CURRENT_MOVE_USER_ID((short)3, "currentMoveUserId"),
    ID((short)4, "id"),
    MATCHMAKING((short)5, "matchmaking"),
    OVER((short)6, "over"),
    LAST_MOVE((short)7, "lastMove"),
    OPPONENT_PRESENT((short)8, "opponentPresent"),
    RANDOM_SEED((short)9, "randomSeed"),
    USERS_BY_ID((short)10, "usersById"),
    UNREAD_CHAT_IDS((short)11, "unreadChatIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATED_AT
          return CREATED_AT;
        case 2: // CREATED_BY_USER_ID
          return CREATED_BY_USER_ID;
        case 3: // CURRENT_MOVE_USER_ID
          return CURRENT_MOVE_USER_ID;
        case 4: // ID
          return ID;
        case 5: // MATCHMAKING
          return MATCHMAKING;
        case 6: // OVER
          return OVER;
        case 7: // LAST_MOVE
          return LAST_MOVE;
        case 8: // OPPONENT_PRESENT
          return OPPONENT_PRESENT;
        case 9: // RANDOM_SEED
          return RANDOM_SEED;
        case 10: // USERS_BY_ID
          return USERS_BY_ID;
        case 11: // UNREAD_CHAT_IDS
          return UNREAD_CHAT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDBYUSERID_ISSET_ID = 0;
  private static final int __CURRENTMOVEUSERID_ISSET_ID = 1;
  private static final int __ID_ISSET_ID = 2;
  private static final int __MATCHMAKING_ISSET_ID = 3;
  private static final int __OVER_ISSET_ID = 4;
  private static final int __OPPONENTPRESENT_ISSET_ID = 5;
  private static final int __RANDOMSEED_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  private _Fields optionals[] = {_Fields.CURRENT_MOVE_USER_ID,_Fields.LAST_MOVE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_BY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("createdByUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_MOVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("currentMoveUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MATCHMAKING, new org.apache.thrift.meta_data.FieldMetaData("matchmaking", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OVER, new org.apache.thrift.meta_data.FieldMetaData("over", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_MOVE, new org.apache.thrift.meta_data.FieldMetaData("lastMove", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Move.class)));
    tmpMap.put(_Fields.OPPONENT_PRESENT, new org.apache.thrift.meta_data.FieldMetaData("opponentPresent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANDOM_SEED, new org.apache.thrift.meta_data.FieldMetaData("randomSeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USERS_BY_ID, new org.apache.thrift.meta_data.FieldMetaData("usersById", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
    tmpMap.put(_Fields.UNREAD_CHAT_IDS, new org.apache.thrift.meta_data.FieldMetaData("unreadChatIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameMeta.class, metaDataMap);
  }

  public GameMeta() {
  }

  public GameMeta(
    String createdAt,
    long createdByUserId,
    long id,
    boolean matchmaking,
    boolean over,
    boolean opponentPresent,
    long randomSeed,
    Map<Long,User> usersById,
    List<Long> unreadChatIds)
  {
    this();
    this.createdAt = createdAt;
    this.createdByUserId = createdByUserId;
    setCreatedByUserIdIsSet(true);
    this.id = id;
    setIdIsSet(true);
    this.matchmaking = matchmaking;
    setMatchmakingIsSet(true);
    this.over = over;
    setOverIsSet(true);
    this.opponentPresent = opponentPresent;
    setOpponentPresentIsSet(true);
    this.randomSeed = randomSeed;
    setRandomSeedIsSet(true);
    this.usersById = usersById;
    this.unreadChatIds = unreadChatIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameMeta(GameMeta other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    this.createdByUserId = other.createdByUserId;
    this.currentMoveUserId = other.currentMoveUserId;
    this.id = other.id;
    this.matchmaking = other.matchmaking;
    this.over = other.over;
    if (other.isSetLastMove()) {
      this.lastMove = new Move(other.lastMove);
    }
    this.opponentPresent = other.opponentPresent;
    this.randomSeed = other.randomSeed;
    if (other.isSetUsersById()) {
      Map<Long,User> __this__usersById = new HashMap<Long,User>();
      for (Map.Entry<Long, User> other_element : other.usersById.entrySet()) {

        Long other_element_key = other_element.getKey();
        User other_element_value = other_element.getValue();

        Long __this__usersById_copy_key = other_element_key;

        User __this__usersById_copy_value = new User(other_element_value);

        __this__usersById.put(__this__usersById_copy_key, __this__usersById_copy_value);
      }
      this.usersById = __this__usersById;
    }
    if (other.isSetUnreadChatIds()) {
      List<Long> __this__unreadChatIds = new ArrayList<Long>();
      for (Long other_element : other.unreadChatIds) {
        __this__unreadChatIds.add(other_element);
      }
      this.unreadChatIds = __this__unreadChatIds;
    }
  }

  public GameMeta deepCopy() {
    return new GameMeta(this);
  }

  @Override
  public void clear() {
    this.createdAt = null;
    setCreatedByUserIdIsSet(false);
    this.createdByUserId = 0;
    setCurrentMoveUserIdIsSet(false);
    this.currentMoveUserId = 0;
    setIdIsSet(false);
    this.id = 0;
    setMatchmakingIsSet(false);
    this.matchmaking = false;
    setOverIsSet(false);
    this.over = false;
    this.lastMove = null;
    setOpponentPresentIsSet(false);
    this.opponentPresent = false;
    setRandomSeedIsSet(false);
    this.randomSeed = 0;
    this.usersById = null;
    this.unreadChatIds = null;
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public GameMeta setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public long getCreatedByUserId() {
    return this.createdByUserId;
  }

  public GameMeta setCreatedByUserId(long createdByUserId) {
    this.createdByUserId = createdByUserId;
    setCreatedByUserIdIsSet(true);
    return this;
  }

  public void unsetCreatedByUserId() {
    __isset_bit_vector.clear(__CREATEDBYUSERID_ISSET_ID);
  }

  /** Returns true if field createdByUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedByUserId() {
    return __isset_bit_vector.get(__CREATEDBYUSERID_ISSET_ID);
  }

  public void setCreatedByUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEDBYUSERID_ISSET_ID, value);
  }

  public long getCurrentMoveUserId() {
    return this.currentMoveUserId;
  }

  public GameMeta setCurrentMoveUserId(long currentMoveUserId) {
    this.currentMoveUserId = currentMoveUserId;
    setCurrentMoveUserIdIsSet(true);
    return this;
  }

  public void unsetCurrentMoveUserId() {
    __isset_bit_vector.clear(__CURRENTMOVEUSERID_ISSET_ID);
  }

  /** Returns true if field currentMoveUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMoveUserId() {
    return __isset_bit_vector.get(__CURRENTMOVEUSERID_ISSET_ID);
  }

  public void setCurrentMoveUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTMOVEUSERID_ISSET_ID, value);
  }

  public long getId() {
    return this.id;
  }

  public GameMeta setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public boolean isMatchmaking() {
    return this.matchmaking;
  }

  public GameMeta setMatchmaking(boolean matchmaking) {
    this.matchmaking = matchmaking;
    setMatchmakingIsSet(true);
    return this;
  }

  public void unsetMatchmaking() {
    __isset_bit_vector.clear(__MATCHMAKING_ISSET_ID);
  }

  /** Returns true if field matchmaking is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchmaking() {
    return __isset_bit_vector.get(__MATCHMAKING_ISSET_ID);
  }

  public void setMatchmakingIsSet(boolean value) {
    __isset_bit_vector.set(__MATCHMAKING_ISSET_ID, value);
  }

  public boolean isOver() {
    return this.over;
  }

  public GameMeta setOver(boolean over) {
    this.over = over;
    setOverIsSet(true);
    return this;
  }

  public void unsetOver() {
    __isset_bit_vector.clear(__OVER_ISSET_ID);
  }

  /** Returns true if field over is set (has been assigned a value) and false otherwise */
  public boolean isSetOver() {
    return __isset_bit_vector.get(__OVER_ISSET_ID);
  }

  public void setOverIsSet(boolean value) {
    __isset_bit_vector.set(__OVER_ISSET_ID, value);
  }

  public Move getLastMove() {
    return this.lastMove;
  }

  public GameMeta setLastMove(Move lastMove) {
    this.lastMove = lastMove;
    return this;
  }

  public void unsetLastMove() {
    this.lastMove = null;
  }

  /** Returns true if field lastMove is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMove() {
    return this.lastMove != null;
  }

  public void setLastMoveIsSet(boolean value) {
    if (!value) {
      this.lastMove = null;
    }
  }

  public boolean isOpponentPresent() {
    return this.opponentPresent;
  }

  public GameMeta setOpponentPresent(boolean opponentPresent) {
    this.opponentPresent = opponentPresent;
    setOpponentPresentIsSet(true);
    return this;
  }

  public void unsetOpponentPresent() {
    __isset_bit_vector.clear(__OPPONENTPRESENT_ISSET_ID);
  }

  /** Returns true if field opponentPresent is set (has been assigned a value) and false otherwise */
  public boolean isSetOpponentPresent() {
    return __isset_bit_vector.get(__OPPONENTPRESENT_ISSET_ID);
  }

  public void setOpponentPresentIsSet(boolean value) {
    __isset_bit_vector.set(__OPPONENTPRESENT_ISSET_ID, value);
  }

  public long getRandomSeed() {
    return this.randomSeed;
  }

  public GameMeta setRandomSeed(long randomSeed) {
    this.randomSeed = randomSeed;
    setRandomSeedIsSet(true);
    return this;
  }

  public void unsetRandomSeed() {
    __isset_bit_vector.clear(__RANDOMSEED_ISSET_ID);
  }

  /** Returns true if field randomSeed is set (has been assigned a value) and false otherwise */
  public boolean isSetRandomSeed() {
    return __isset_bit_vector.get(__RANDOMSEED_ISSET_ID);
  }

  public void setRandomSeedIsSet(boolean value) {
    __isset_bit_vector.set(__RANDOMSEED_ISSET_ID, value);
  }

  public int getUsersByIdSize() {
    return (this.usersById == null) ? 0 : this.usersById.size();
  }

  public void putToUsersById(long key, User val) {
    if (this.usersById == null) {
      this.usersById = new HashMap<Long,User>();
    }
    this.usersById.put(key, val);
  }

  public Map<Long,User> getUsersById() {
    return this.usersById;
  }

  public GameMeta setUsersById(Map<Long,User> usersById) {
    this.usersById = usersById;
    return this;
  }

  public void unsetUsersById() {
    this.usersById = null;
  }

  /** Returns true if field usersById is set (has been assigned a value) and false otherwise */
  public boolean isSetUsersById() {
    return this.usersById != null;
  }

  public void setUsersByIdIsSet(boolean value) {
    if (!value) {
      this.usersById = null;
    }
  }

  public int getUnreadChatIdsSize() {
    return (this.unreadChatIds == null) ? 0 : this.unreadChatIds.size();
  }

  public java.util.Iterator<Long> getUnreadChatIdsIterator() {
    return (this.unreadChatIds == null) ? null : this.unreadChatIds.iterator();
  }

  public void addToUnreadChatIds(long elem) {
    if (this.unreadChatIds == null) {
      this.unreadChatIds = new ArrayList<Long>();
    }
    this.unreadChatIds.add(elem);
  }

  public List<Long> getUnreadChatIds() {
    return this.unreadChatIds;
  }

  public GameMeta setUnreadChatIds(List<Long> unreadChatIds) {
    this.unreadChatIds = unreadChatIds;
    return this;
  }

  public void unsetUnreadChatIds() {
    this.unreadChatIds = null;
  }

  /** Returns true if field unreadChatIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUnreadChatIds() {
    return this.unreadChatIds != null;
  }

  public void setUnreadChatIdsIsSet(boolean value) {
    if (!value) {
      this.unreadChatIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case CREATED_BY_USER_ID:
      if (value == null) {
        unsetCreatedByUserId();
      } else {
        setCreatedByUserId((Long)value);
      }
      break;

    case CURRENT_MOVE_USER_ID:
      if (value == null) {
        unsetCurrentMoveUserId();
      } else {
        setCurrentMoveUserId((Long)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MATCHMAKING:
      if (value == null) {
        unsetMatchmaking();
      } else {
        setMatchmaking((Boolean)value);
      }
      break;

    case OVER:
      if (value == null) {
        unsetOver();
      } else {
        setOver((Boolean)value);
      }
      break;

    case LAST_MOVE:
      if (value == null) {
        unsetLastMove();
      } else {
        setLastMove((Move)value);
      }
      break;

    case OPPONENT_PRESENT:
      if (value == null) {
        unsetOpponentPresent();
      } else {
        setOpponentPresent((Boolean)value);
      }
      break;

    case RANDOM_SEED:
      if (value == null) {
        unsetRandomSeed();
      } else {
        setRandomSeed((Long)value);
      }
      break;

    case USERS_BY_ID:
      if (value == null) {
        unsetUsersById();
      } else {
        setUsersById((Map<Long,User>)value);
      }
      break;

    case UNREAD_CHAT_IDS:
      if (value == null) {
        unsetUnreadChatIds();
      } else {
        setUnreadChatIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATED_AT:
      return getCreatedAt();

    case CREATED_BY_USER_ID:
      return Long.valueOf(getCreatedByUserId());

    case CURRENT_MOVE_USER_ID:
      return Long.valueOf(getCurrentMoveUserId());

    case ID:
      return Long.valueOf(getId());

    case MATCHMAKING:
      return Boolean.valueOf(isMatchmaking());

    case OVER:
      return Boolean.valueOf(isOver());

    case LAST_MOVE:
      return getLastMove();

    case OPPONENT_PRESENT:
      return Boolean.valueOf(isOpponentPresent());

    case RANDOM_SEED:
      return Long.valueOf(getRandomSeed());

    case USERS_BY_ID:
      return getUsersById();

    case UNREAD_CHAT_IDS:
      return getUnreadChatIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATED_AT:
      return isSetCreatedAt();
    case CREATED_BY_USER_ID:
      return isSetCreatedByUserId();
    case CURRENT_MOVE_USER_ID:
      return isSetCurrentMoveUserId();
    case ID:
      return isSetId();
    case MATCHMAKING:
      return isSetMatchmaking();
    case OVER:
      return isSetOver();
    case LAST_MOVE:
      return isSetLastMove();
    case OPPONENT_PRESENT:
      return isSetOpponentPresent();
    case RANDOM_SEED:
      return isSetRandomSeed();
    case USERS_BY_ID:
      return isSetUsersById();
    case UNREAD_CHAT_IDS:
      return isSetUnreadChatIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameMeta)
      return this.equals((GameMeta)that);
    return false;
  }

  public boolean equals(GameMeta that) {
    if (that == null)
      return false;

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_createdByUserId = true;
    boolean that_present_createdByUserId = true;
    if (this_present_createdByUserId || that_present_createdByUserId) {
      if (!(this_present_createdByUserId && that_present_createdByUserId))
        return false;
      if (this.createdByUserId != that.createdByUserId)
        return false;
    }

    boolean this_present_currentMoveUserId = true && this.isSetCurrentMoveUserId();
    boolean that_present_currentMoveUserId = true && that.isSetCurrentMoveUserId();
    if (this_present_currentMoveUserId || that_present_currentMoveUserId) {
      if (!(this_present_currentMoveUserId && that_present_currentMoveUserId))
        return false;
      if (this.currentMoveUserId != that.currentMoveUserId)
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_matchmaking = true;
    boolean that_present_matchmaking = true;
    if (this_present_matchmaking || that_present_matchmaking) {
      if (!(this_present_matchmaking && that_present_matchmaking))
        return false;
      if (this.matchmaking != that.matchmaking)
        return false;
    }

    boolean this_present_over = true;
    boolean that_present_over = true;
    if (this_present_over || that_present_over) {
      if (!(this_present_over && that_present_over))
        return false;
      if (this.over != that.over)
        return false;
    }

    boolean this_present_lastMove = true && this.isSetLastMove();
    boolean that_present_lastMove = true && that.isSetLastMove();
    if (this_present_lastMove || that_present_lastMove) {
      if (!(this_present_lastMove && that_present_lastMove))
        return false;
      if (!this.lastMove.equals(that.lastMove))
        return false;
    }

    boolean this_present_opponentPresent = true;
    boolean that_present_opponentPresent = true;
    if (this_present_opponentPresent || that_present_opponentPresent) {
      if (!(this_present_opponentPresent && that_present_opponentPresent))
        return false;
      if (this.opponentPresent != that.opponentPresent)
        return false;
    }

    boolean this_present_randomSeed = true;
    boolean that_present_randomSeed = true;
    if (this_present_randomSeed || that_present_randomSeed) {
      if (!(this_present_randomSeed && that_present_randomSeed))
        return false;
      if (this.randomSeed != that.randomSeed)
        return false;
    }

    boolean this_present_usersById = true && this.isSetUsersById();
    boolean that_present_usersById = true && that.isSetUsersById();
    if (this_present_usersById || that_present_usersById) {
      if (!(this_present_usersById && that_present_usersById))
        return false;
      if (!this.usersById.equals(that.usersById))
        return false;
    }

    boolean this_present_unreadChatIds = true && this.isSetUnreadChatIds();
    boolean that_present_unreadChatIds = true && that.isSetUnreadChatIds();
    if (this_present_unreadChatIds || that_present_unreadChatIds) {
      if (!(this_present_unreadChatIds && that_present_unreadChatIds))
        return false;
      if (!this.unreadChatIds.equals(that.unreadChatIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(GameMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GameMeta typedOther = (GameMeta)other;

    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedByUserId()).compareTo(typedOther.isSetCreatedByUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedByUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdByUserId, typedOther.createdByUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMoveUserId()).compareTo(typedOther.isSetCurrentMoveUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMoveUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMoveUserId, typedOther.currentMoveUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchmaking()).compareTo(typedOther.isSetMatchmaking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchmaking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchmaking, typedOther.matchmaking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOver()).compareTo(typedOther.isSetOver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.over, typedOther.over);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastMove()).compareTo(typedOther.isSetLastMove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMove()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMove, typedOther.lastMove);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpponentPresent()).compareTo(typedOther.isSetOpponentPresent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpponentPresent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opponentPresent, typedOther.opponentPresent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandomSeed()).compareTo(typedOther.isSetRandomSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandomSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randomSeed, typedOther.randomSeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsersById()).compareTo(typedOther.isSetUsersById());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsersById()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersById, typedOther.usersById);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnreadChatIds()).compareTo(typedOther.isSetUnreadChatIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnreadChatIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unreadChatIds, typedOther.unreadChatIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameMeta(");
    boolean first = true;

    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdByUserId:");
    sb.append(this.createdByUserId);
    first = false;
    if (isSetCurrentMoveUserId()) {
      if (!first) sb.append(", ");
      sb.append("currentMoveUserId:");
      sb.append(this.currentMoveUserId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matchmaking:");
    sb.append(this.matchmaking);
    first = false;
    if (!first) sb.append(", ");
    sb.append("over:");
    sb.append(this.over);
    first = false;
    if (isSetLastMove()) {
      if (!first) sb.append(", ");
      sb.append("lastMove:");
      if (this.lastMove == null) {
        sb.append("null");
      } else {
        sb.append(this.lastMove);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("opponentPresent:");
    sb.append(this.opponentPresent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("randomSeed:");
    sb.append(this.randomSeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usersById:");
    if (this.usersById == null) {
      sb.append("null");
    } else {
      sb.append(this.usersById);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unreadChatIds:");
    if (this.unreadChatIds == null) {
      sb.append("null");
    } else {
      sb.append(this.unreadChatIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (createdAt == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'createdByUserId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'matchmaking' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'over' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'opponentPresent' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'randomSeed' because it's a primitive and you chose the non-beans generator.
    if (usersById == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'usersById' was not present! Struct: " + toString());
    }
    if (unreadChatIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unreadChatIds' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameMetaStandardSchemeFactory implements SchemeFactory {
    public GameMetaStandardScheme getScheme() {
      return new GameMetaStandardScheme();
    }
  }

  private static class GameMetaStandardScheme extends StandardScheme<GameMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_BY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdByUserId = iprot.readI64();
              struct.setCreatedByUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_MOVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentMoveUserId = iprot.readI64();
              struct.setCurrentMoveUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCHMAKING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.matchmaking = iprot.readBool();
              struct.setMatchmakingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.over = iprot.readBool();
              struct.setOverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_MOVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastMove = new Move();
              struct.lastMove.read(iprot);
              struct.setLastMoveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPPONENT_PRESENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.opponentPresent = iprot.readBool();
              struct.setOpponentPresentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RANDOM_SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.randomSeed = iprot.readI64();
              struct.setRandomSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USERS_BY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.usersById = new HashMap<Long,User>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  long _key26; // required
                  User _val27; // optional
                  _key26 = iprot.readI64();
                  _val27 = new User();
                  _val27.read(iprot);
                  struct.usersById.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setUsersByIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNREAD_CHAT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.unreadChatIds = new ArrayList<Long>(_list28.size);
                for (int _i29 = 0; _i29 < _list28.size; ++_i29)
                {
                  long _elem30; // required
                  _elem30 = iprot.readI64();
                  struct.unreadChatIds.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setUnreadChatIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCreatedByUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdByUserId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMatchmaking()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'matchmaking' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOver()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'over' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOpponentPresent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'opponentPresent' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRandomSeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'randomSeed' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_BY_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.createdByUserId);
      oprot.writeFieldEnd();
      if (struct.isSetCurrentMoveUserId()) {
        oprot.writeFieldBegin(CURRENT_MOVE_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.currentMoveUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MATCHMAKING_FIELD_DESC);
      oprot.writeBool(struct.matchmaking);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVER_FIELD_DESC);
      oprot.writeBool(struct.over);
      oprot.writeFieldEnd();
      if (struct.lastMove != null) {
        if (struct.isSetLastMove()) {
          oprot.writeFieldBegin(LAST_MOVE_FIELD_DESC);
          struct.lastMove.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(OPPONENT_PRESENT_FIELD_DESC);
      oprot.writeBool(struct.opponentPresent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANDOM_SEED_FIELD_DESC);
      oprot.writeI64(struct.randomSeed);
      oprot.writeFieldEnd();
      if (struct.usersById != null) {
        oprot.writeFieldBegin(USERS_BY_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.usersById.size()));
          for (Map.Entry<Long, User> _iter31 : struct.usersById.entrySet())
          {
            oprot.writeI64(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.unreadChatIds != null) {
        oprot.writeFieldBegin(UNREAD_CHAT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.unreadChatIds.size()));
          for (long _iter32 : struct.unreadChatIds)
          {
            oprot.writeI64(_iter32);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameMetaTupleSchemeFactory implements SchemeFactory {
    public GameMetaTupleScheme getScheme() {
      return new GameMetaTupleScheme();
    }
  }

  private static class GameMetaTupleScheme extends TupleScheme<GameMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.createdAt);
      oprot.writeI64(struct.createdByUserId);
      oprot.writeI64(struct.id);
      oprot.writeBool(struct.matchmaking);
      oprot.writeBool(struct.over);
      oprot.writeBool(struct.opponentPresent);
      oprot.writeI64(struct.randomSeed);
      {
        oprot.writeI32(struct.usersById.size());
        for (Map.Entry<Long, User> _iter33 : struct.usersById.entrySet())
        {
          oprot.writeI64(_iter33.getKey());
          _iter33.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.unreadChatIds.size());
        for (long _iter34 : struct.unreadChatIds)
        {
          oprot.writeI64(_iter34);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetCurrentMoveUserId()) {
        optionals.set(0);
      }
      if (struct.isSetLastMove()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCurrentMoveUserId()) {
        oprot.writeI64(struct.currentMoveUserId);
      }
      if (struct.isSetLastMove()) {
        struct.lastMove.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.createdAt = iprot.readString();
      struct.setCreatedAtIsSet(true);
      struct.createdByUserId = iprot.readI64();
      struct.setCreatedByUserIdIsSet(true);
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.matchmaking = iprot.readBool();
      struct.setMatchmakingIsSet(true);
      struct.over = iprot.readBool();
      struct.setOverIsSet(true);
      struct.opponentPresent = iprot.readBool();
      struct.setOpponentPresentIsSet(true);
      struct.randomSeed = iprot.readI64();
      struct.setRandomSeedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map35 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.usersById = new HashMap<Long,User>(2*_map35.size);
        for (int _i36 = 0; _i36 < _map35.size; ++_i36)
        {
          long _key37; // required
          User _val38; // optional
          _key37 = iprot.readI64();
          _val38 = new User();
          _val38.read(iprot);
          struct.usersById.put(_key37, _val38);
        }
      }
      struct.setUsersByIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.unreadChatIds = new ArrayList<Long>(_list39.size);
        for (int _i40 = 0; _i40 < _list39.size; ++_i40)
        {
          long _elem41; // required
          _elem41 = iprot.readI64();
          struct.unreadChatIds.add(_elem41);
        }
      }
      struct.setUnreadChatIdsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.currentMoveUserId = iprot.readI64();
        struct.setCurrentMoveUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastMove = new Move();
        struct.lastMove.read(iprot);
        struct.setLastMoveIsSet(true);
      }
    }
  }

}

