/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WwfApi {

  public interface Iface {

    public GameIndex getGameIndex(String accessToken) throws org.apache.thrift.TException;

    public GameState getGameState(String accessToken, long gameId) throws org.apache.thrift.TException;

    public GameState makeMove(String accessToken, GameState currentState, MoveSubmission move) throws org.apache.thrift.TException;

    public void createMatchmakingGame(String accessToken, NewGameParams params) throws org.apache.thrift.TException;

    public ChatMessage sendChatMessage(String accessToken, long gameId, String message) throws org.apache.thrift.TException;

    public List<ChatMessage> getUnseenChats(String accessToken, long gameId) throws org.apache.thrift.TException;

    /**
     * Check whether or not the provided words are in the WWF dictionary.
     * 
     * @param words set of words to be checked
     * @return set of words that are NOT in the WWF dictionary.
     * 
     * @param accessToken
     * @param words
     */
    public Set<String> dictionaryLookup(String accessToken, Set<String> words) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getGameIndex(String accessToken, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGameIndex_call> resultHandler) throws org.apache.thrift.TException;

    public void getGameState(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGameState_call> resultHandler) throws org.apache.thrift.TException;

    public void makeMove(String accessToken, GameState currentState, MoveSubmission move, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.makeMove_call> resultHandler) throws org.apache.thrift.TException;

    public void createMatchmakingGame(String accessToken, NewGameParams params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createMatchmakingGame_call> resultHandler) throws org.apache.thrift.TException;

    public void sendChatMessage(String accessToken, long gameId, String message, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendChatMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void getUnseenChats(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getUnseenChats_call> resultHandler) throws org.apache.thrift.TException;

    public void dictionaryLookup(String accessToken, Set<String> words, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.dictionaryLookup_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public GameIndex getGameIndex(String accessToken) throws org.apache.thrift.TException
    {
      send_getGameIndex(accessToken);
      return recv_getGameIndex();
    }

    public void send_getGameIndex(String accessToken) throws org.apache.thrift.TException
    {
      getGameIndex_args args = new getGameIndex_args();
      args.setAccessToken(accessToken);
      sendBase("getGameIndex", args);
    }

    public GameIndex recv_getGameIndex() throws org.apache.thrift.TException
    {
      getGameIndex_result result = new getGameIndex_result();
      receiveBase(result, "getGameIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGameIndex failed: unknown result");
    }

    public GameState getGameState(String accessToken, long gameId) throws org.apache.thrift.TException
    {
      send_getGameState(accessToken, gameId);
      return recv_getGameState();
    }

    public void send_getGameState(String accessToken, long gameId) throws org.apache.thrift.TException
    {
      getGameState_args args = new getGameState_args();
      args.setAccessToken(accessToken);
      args.setGameId(gameId);
      sendBase("getGameState", args);
    }

    public GameState recv_getGameState() throws org.apache.thrift.TException
    {
      getGameState_result result = new getGameState_result();
      receiveBase(result, "getGameState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGameState failed: unknown result");
    }

    public GameState makeMove(String accessToken, GameState currentState, MoveSubmission move) throws org.apache.thrift.TException
    {
      send_makeMove(accessToken, currentState, move);
      return recv_makeMove();
    }

    public void send_makeMove(String accessToken, GameState currentState, MoveSubmission move) throws org.apache.thrift.TException
    {
      makeMove_args args = new makeMove_args();
      args.setAccessToken(accessToken);
      args.setCurrentState(currentState);
      args.setMove(move);
      sendBase("makeMove", args);
    }

    public GameState recv_makeMove() throws org.apache.thrift.TException
    {
      makeMove_result result = new makeMove_result();
      receiveBase(result, "makeMove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeMove failed: unknown result");
    }

    public void createMatchmakingGame(String accessToken, NewGameParams params) throws org.apache.thrift.TException
    {
      send_createMatchmakingGame(accessToken, params);
      recv_createMatchmakingGame();
    }

    public void send_createMatchmakingGame(String accessToken, NewGameParams params) throws org.apache.thrift.TException
    {
      createMatchmakingGame_args args = new createMatchmakingGame_args();
      args.setAccessToken(accessToken);
      args.setParams(params);
      sendBase("createMatchmakingGame", args);
    }

    public void recv_createMatchmakingGame() throws org.apache.thrift.TException
    {
      createMatchmakingGame_result result = new createMatchmakingGame_result();
      receiveBase(result, "createMatchmakingGame");
      return;
    }

    public ChatMessage sendChatMessage(String accessToken, long gameId, String message) throws org.apache.thrift.TException
    {
      send_sendChatMessage(accessToken, gameId, message);
      return recv_sendChatMessage();
    }

    public void send_sendChatMessage(String accessToken, long gameId, String message) throws org.apache.thrift.TException
    {
      sendChatMessage_args args = new sendChatMessage_args();
      args.setAccessToken(accessToken);
      args.setGameId(gameId);
      args.setMessage(message);
      sendBase("sendChatMessage", args);
    }

    public ChatMessage recv_sendChatMessage() throws org.apache.thrift.TException
    {
      sendChatMessage_result result = new sendChatMessage_result();
      receiveBase(result, "sendChatMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendChatMessage failed: unknown result");
    }

    public List<ChatMessage> getUnseenChats(String accessToken, long gameId) throws org.apache.thrift.TException
    {
      send_getUnseenChats(accessToken, gameId);
      return recv_getUnseenChats();
    }

    public void send_getUnseenChats(String accessToken, long gameId) throws org.apache.thrift.TException
    {
      getUnseenChats_args args = new getUnseenChats_args();
      args.setAccessToken(accessToken);
      args.setGameId(gameId);
      sendBase("getUnseenChats", args);
    }

    public List<ChatMessage> recv_getUnseenChats() throws org.apache.thrift.TException
    {
      getUnseenChats_result result = new getUnseenChats_result();
      receiveBase(result, "getUnseenChats");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUnseenChats failed: unknown result");
    }

    public Set<String> dictionaryLookup(String accessToken, Set<String> words) throws org.apache.thrift.TException
    {
      send_dictionaryLookup(accessToken, words);
      return recv_dictionaryLookup();
    }

    public void send_dictionaryLookup(String accessToken, Set<String> words) throws org.apache.thrift.TException
    {
      dictionaryLookup_args args = new dictionaryLookup_args();
      args.setAccessToken(accessToken);
      args.setWords(words);
      sendBase("dictionaryLookup", args);
    }

    public Set<String> recv_dictionaryLookup() throws org.apache.thrift.TException
    {
      dictionaryLookup_result result = new dictionaryLookup_result();
      receiveBase(result, "dictionaryLookup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dictionaryLookup failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getGameIndex(String accessToken, org.apache.thrift.async.AsyncMethodCallback<getGameIndex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGameIndex_call method_call = new getGameIndex_call(accessToken, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGameIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      public getGameIndex_call(String accessToken, org.apache.thrift.async.AsyncMethodCallback<getGameIndex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGameIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGameIndex_args args = new getGameIndex_args();
        args.setAccessToken(accessToken);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameIndex getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGameIndex();
      }
    }

    public void getGameState(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<getGameState_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGameState_call method_call = new getGameState_call(accessToken, gameId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGameState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private long gameId;
      public getGameState_call(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<getGameState_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.gameId = gameId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGameState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGameState_args args = new getGameState_args();
        args.setAccessToken(accessToken);
        args.setGameId(gameId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameState getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGameState();
      }
    }

    public void makeMove(String accessToken, GameState currentState, MoveSubmission move, org.apache.thrift.async.AsyncMethodCallback<makeMove_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeMove_call method_call = new makeMove_call(accessToken, currentState, move, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeMove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private GameState currentState;
      private MoveSubmission move;
      public makeMove_call(String accessToken, GameState currentState, MoveSubmission move, org.apache.thrift.async.AsyncMethodCallback<makeMove_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.currentState = currentState;
        this.move = move;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeMove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeMove_args args = new makeMove_args();
        args.setAccessToken(accessToken);
        args.setCurrentState(currentState);
        args.setMove(move);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GameState getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeMove();
      }
    }

    public void createMatchmakingGame(String accessToken, NewGameParams params, org.apache.thrift.async.AsyncMethodCallback<createMatchmakingGame_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMatchmakingGame_call method_call = new createMatchmakingGame_call(accessToken, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMatchmakingGame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private NewGameParams params;
      public createMatchmakingGame_call(String accessToken, NewGameParams params, org.apache.thrift.async.AsyncMethodCallback<createMatchmakingGame_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMatchmakingGame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMatchmakingGame_args args = new createMatchmakingGame_args();
        args.setAccessToken(accessToken);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createMatchmakingGame();
      }
    }

    public void sendChatMessage(String accessToken, long gameId, String message, org.apache.thrift.async.AsyncMethodCallback<sendChatMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendChatMessage_call method_call = new sendChatMessage_call(accessToken, gameId, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendChatMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private long gameId;
      private String message;
      public sendChatMessage_call(String accessToken, long gameId, String message, org.apache.thrift.async.AsyncMethodCallback<sendChatMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.gameId = gameId;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendChatMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendChatMessage_args args = new sendChatMessage_args();
        args.setAccessToken(accessToken);
        args.setGameId(gameId);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChatMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendChatMessage();
      }
    }

    public void getUnseenChats(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<getUnseenChats_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUnseenChats_call method_call = new getUnseenChats_call(accessToken, gameId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUnseenChats_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private long gameId;
      public getUnseenChats_call(String accessToken, long gameId, org.apache.thrift.async.AsyncMethodCallback<getUnseenChats_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.gameId = gameId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUnseenChats", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUnseenChats_args args = new getUnseenChats_args();
        args.setAccessToken(accessToken);
        args.setGameId(gameId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ChatMessage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUnseenChats();
      }
    }

    public void dictionaryLookup(String accessToken, Set<String> words, org.apache.thrift.async.AsyncMethodCallback<dictionaryLookup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dictionaryLookup_call method_call = new dictionaryLookup_call(accessToken, words, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dictionaryLookup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String accessToken;
      private Set<String> words;
      public dictionaryLookup_call(String accessToken, Set<String> words, org.apache.thrift.async.AsyncMethodCallback<dictionaryLookup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.accessToken = accessToken;
        this.words = words;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dictionaryLookup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dictionaryLookup_args args = new dictionaryLookup_args();
        args.setAccessToken(accessToken);
        args.setWords(words);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dictionaryLookup();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getGameIndex", new getGameIndex());
      processMap.put("getGameState", new getGameState());
      processMap.put("makeMove", new makeMove());
      processMap.put("createMatchmakingGame", new createMatchmakingGame());
      processMap.put("sendChatMessage", new sendChatMessage());
      processMap.put("getUnseenChats", new getUnseenChats());
      processMap.put("dictionaryLookup", new dictionaryLookup());
      return processMap;
    }

    private static class getGameIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGameIndex_args> {
      public getGameIndex() {
        super("getGameIndex");
      }

      protected getGameIndex_args getEmptyArgsInstance() {
        return new getGameIndex_args();
      }

      protected getGameIndex_result getResult(I iface, getGameIndex_args args) throws org.apache.thrift.TException {
        getGameIndex_result result = new getGameIndex_result();
        result.success = iface.getGameIndex(args.accessToken);
        return result;
      }
    }

    private static class getGameState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGameState_args> {
      public getGameState() {
        super("getGameState");
      }

      protected getGameState_args getEmptyArgsInstance() {
        return new getGameState_args();
      }

      protected getGameState_result getResult(I iface, getGameState_args args) throws org.apache.thrift.TException {
        getGameState_result result = new getGameState_result();
        result.success = iface.getGameState(args.accessToken, args.gameId);
        return result;
      }
    }

    private static class makeMove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeMove_args> {
      public makeMove() {
        super("makeMove");
      }

      protected makeMove_args getEmptyArgsInstance() {
        return new makeMove_args();
      }

      protected makeMove_result getResult(I iface, makeMove_args args) throws org.apache.thrift.TException {
        makeMove_result result = new makeMove_result();
        result.success = iface.makeMove(args.accessToken, args.currentState, args.move);
        return result;
      }
    }

    private static class createMatchmakingGame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMatchmakingGame_args> {
      public createMatchmakingGame() {
        super("createMatchmakingGame");
      }

      protected createMatchmakingGame_args getEmptyArgsInstance() {
        return new createMatchmakingGame_args();
      }

      protected createMatchmakingGame_result getResult(I iface, createMatchmakingGame_args args) throws org.apache.thrift.TException {
        createMatchmakingGame_result result = new createMatchmakingGame_result();
        iface.createMatchmakingGame(args.accessToken, args.params);
        return result;
      }
    }

    private static class sendChatMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendChatMessage_args> {
      public sendChatMessage() {
        super("sendChatMessage");
      }

      protected sendChatMessage_args getEmptyArgsInstance() {
        return new sendChatMessage_args();
      }

      protected sendChatMessage_result getResult(I iface, sendChatMessage_args args) throws org.apache.thrift.TException {
        sendChatMessage_result result = new sendChatMessage_result();
        result.success = iface.sendChatMessage(args.accessToken, args.gameId, args.message);
        return result;
      }
    }

    private static class getUnseenChats<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUnseenChats_args> {
      public getUnseenChats() {
        super("getUnseenChats");
      }

      protected getUnseenChats_args getEmptyArgsInstance() {
        return new getUnseenChats_args();
      }

      protected getUnseenChats_result getResult(I iface, getUnseenChats_args args) throws org.apache.thrift.TException {
        getUnseenChats_result result = new getUnseenChats_result();
        result.success = iface.getUnseenChats(args.accessToken, args.gameId);
        return result;
      }
    }

    private static class dictionaryLookup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dictionaryLookup_args> {
      public dictionaryLookup() {
        super("dictionaryLookup");
      }

      protected dictionaryLookup_args getEmptyArgsInstance() {
        return new dictionaryLookup_args();
      }

      protected dictionaryLookup_result getResult(I iface, dictionaryLookup_args args) throws org.apache.thrift.TException {
        dictionaryLookup_result result = new dictionaryLookup_result();
        result.success = iface.dictionaryLookup(args.accessToken, args.words);
        return result;
      }
    }

  }

  public static class getGameIndex_args implements org.apache.thrift.TBase<getGameIndex_args, getGameIndex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGameIndex_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGameIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGameIndex_argsTupleSchemeFactory());
    }

    public String accessToken; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGameIndex_args.class, metaDataMap);
    }

    public getGameIndex_args() {
    }

    public getGameIndex_args(
      String accessToken)
    {
      this();
      this.accessToken = accessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGameIndex_args(getGameIndex_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
    }

    public getGameIndex_args deepCopy() {
      return new getGameIndex_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public getGameIndex_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGameIndex_args)
        return this.equals((getGameIndex_args)that);
      return false;
    }

    public boolean equals(getGameIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGameIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGameIndex_args typedOther = (getGameIndex_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGameIndex_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGameIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getGameIndex_argsStandardScheme getScheme() {
        return new getGameIndex_argsStandardScheme();
      }
    }

    private static class getGameIndex_argsStandardScheme extends StandardScheme<getGameIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGameIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGameIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGameIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getGameIndex_argsTupleScheme getScheme() {
        return new getGameIndex_argsTupleScheme();
      }
    }

    private static class getGameIndex_argsTupleScheme extends TupleScheme<getGameIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGameIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGameIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
      }
    }

  }

  public static class getGameIndex_result implements org.apache.thrift.TBase<getGameIndex_result, getGameIndex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGameIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGameIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGameIndex_resultTupleSchemeFactory());
    }

    public GameIndex success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameIndex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGameIndex_result.class, metaDataMap);
    }

    public getGameIndex_result() {
    }

    public getGameIndex_result(
      GameIndex success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGameIndex_result(getGameIndex_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameIndex(other.success);
      }
    }

    public getGameIndex_result deepCopy() {
      return new getGameIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GameIndex getSuccess() {
      return this.success;
    }

    public getGameIndex_result setSuccess(GameIndex success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameIndex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGameIndex_result)
        return this.equals((getGameIndex_result)that);
      return false;
    }

    public boolean equals(getGameIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGameIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGameIndex_result typedOther = (getGameIndex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGameIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGameIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getGameIndex_resultStandardScheme getScheme() {
        return new getGameIndex_resultStandardScheme();
      }
    }

    private static class getGameIndex_resultStandardScheme extends StandardScheme<getGameIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGameIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GameIndex();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGameIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGameIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getGameIndex_resultTupleScheme getScheme() {
        return new getGameIndex_resultTupleScheme();
      }
    }

    private static class getGameIndex_resultTupleScheme extends TupleScheme<getGameIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGameIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGameIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GameIndex();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGameState_args implements org.apache.thrift.TBase<getGameState_args, getGameState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGameState_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGameState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGameState_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public long gameId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      GAME_ID((short)2, "gameId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // GAME_ID
            return GAME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GAMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGameState_args.class, metaDataMap);
    }

    public getGameState_args() {
    }

    public getGameState_args(
      String accessToken,
      long gameId)
    {
      this();
      this.accessToken = accessToken;
      this.gameId = gameId;
      setGameIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGameState_args(getGameState_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.gameId = other.gameId;
    }

    public getGameState_args deepCopy() {
      return new getGameState_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setGameIdIsSet(false);
      this.gameId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public getGameState_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public long getGameId() {
      return this.gameId;
    }

    public getGameState_args setGameId(long gameId) {
      this.gameId = gameId;
      setGameIdIsSet(true);
      return this;
    }

    public void unsetGameId() {
      __isset_bit_vector.clear(__GAMEID_ISSET_ID);
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return __isset_bit_vector.get(__GAMEID_ISSET_ID);
    }

    public void setGameIdIsSet(boolean value) {
      __isset_bit_vector.set(__GAMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case GAME_ID:
        return Long.valueOf(getGameId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case GAME_ID:
        return isSetGameId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGameState_args)
        return this.equals((getGameState_args)that);
      return false;
    }

    public boolean equals(getGameState_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_gameId = true;
      boolean that_present_gameId = true;
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (this.gameId != that.gameId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGameState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGameState_args typedOther = (getGameState_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, typedOther.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGameState_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameId:");
      sb.append(this.gameId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGameState_argsStandardSchemeFactory implements SchemeFactory {
      public getGameState_argsStandardScheme getScheme() {
        return new getGameState_argsStandardScheme();
      }
    }

    private static class getGameState_argsStandardScheme extends StandardScheme<getGameState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGameState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.gameId = iprot.readI64();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGameState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeI64(struct.gameId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGameState_argsTupleSchemeFactory implements SchemeFactory {
      public getGameState_argsTupleScheme getScheme() {
        return new getGameState_argsTupleScheme();
      }
    }

    private static class getGameState_argsTupleScheme extends TupleScheme<getGameState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGameState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetGameId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetGameId()) {
          oprot.writeI64(struct.gameId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGameState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gameId = iprot.readI64();
          struct.setGameIdIsSet(true);
        }
      }
    }

  }

  public static class getGameState_result implements org.apache.thrift.TBase<getGameState_result, getGameState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGameState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGameState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGameState_resultTupleSchemeFactory());
    }

    public GameState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGameState_result.class, metaDataMap);
    }

    public getGameState_result() {
    }

    public getGameState_result(
      GameState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGameState_result(getGameState_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameState(other.success);
      }
    }

    public getGameState_result deepCopy() {
      return new getGameState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GameState getSuccess() {
      return this.success;
    }

    public getGameState_result setSuccess(GameState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGameState_result)
        return this.equals((getGameState_result)that);
      return false;
    }

    public boolean equals(getGameState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGameState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGameState_result typedOther = (getGameState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGameState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGameState_resultStandardSchemeFactory implements SchemeFactory {
      public getGameState_resultStandardScheme getScheme() {
        return new getGameState_resultStandardScheme();
      }
    }

    private static class getGameState_resultStandardScheme extends StandardScheme<getGameState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGameState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GameState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGameState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGameState_resultTupleSchemeFactory implements SchemeFactory {
      public getGameState_resultTupleScheme getScheme() {
        return new getGameState_resultTupleScheme();
      }
    }

    private static class getGameState_resultTupleScheme extends TupleScheme<getGameState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGameState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGameState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GameState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class makeMove_args implements org.apache.thrift.TBase<makeMove_args, makeMove_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeMove_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentState", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField MOVE_FIELD_DESC = new org.apache.thrift.protocol.TField("move", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeMove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeMove_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public GameState currentState; // required
    public MoveSubmission move; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      CURRENT_STATE((short)2, "currentState"),
      MOVE((short)3, "move");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // CURRENT_STATE
            return CURRENT_STATE;
          case 3: // MOVE
            return MOVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("currentState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameState.class)));
      tmpMap.put(_Fields.MOVE, new org.apache.thrift.meta_data.FieldMetaData("move", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MoveSubmission.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeMove_args.class, metaDataMap);
    }

    public makeMove_args() {
    }

    public makeMove_args(
      String accessToken,
      GameState currentState,
      MoveSubmission move)
    {
      this();
      this.accessToken = accessToken;
      this.currentState = currentState;
      this.move = move;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeMove_args(makeMove_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetCurrentState()) {
        this.currentState = new GameState(other.currentState);
      }
      if (other.isSetMove()) {
        this.move = new MoveSubmission(other.move);
      }
    }

    public makeMove_args deepCopy() {
      return new makeMove_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      this.currentState = null;
      this.move = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public makeMove_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public GameState getCurrentState() {
      return this.currentState;
    }

    public makeMove_args setCurrentState(GameState currentState) {
      this.currentState = currentState;
      return this;
    }

    public void unsetCurrentState() {
      this.currentState = null;
    }

    /** Returns true if field currentState is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentState() {
      return this.currentState != null;
    }

    public void setCurrentStateIsSet(boolean value) {
      if (!value) {
        this.currentState = null;
      }
    }

    public MoveSubmission getMove() {
      return this.move;
    }

    public makeMove_args setMove(MoveSubmission move) {
      this.move = move;
      return this;
    }

    public void unsetMove() {
      this.move = null;
    }

    /** Returns true if field move is set (has been assigned a value) and false otherwise */
    public boolean isSetMove() {
      return this.move != null;
    }

    public void setMoveIsSet(boolean value) {
      if (!value) {
        this.move = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case CURRENT_STATE:
        if (value == null) {
          unsetCurrentState();
        } else {
          setCurrentState((GameState)value);
        }
        break;

      case MOVE:
        if (value == null) {
          unsetMove();
        } else {
          setMove((MoveSubmission)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case CURRENT_STATE:
        return getCurrentState();

      case MOVE:
        return getMove();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case CURRENT_STATE:
        return isSetCurrentState();
      case MOVE:
        return isSetMove();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeMove_args)
        return this.equals((makeMove_args)that);
      return false;
    }

    public boolean equals(makeMove_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_currentState = true && this.isSetCurrentState();
      boolean that_present_currentState = true && that.isSetCurrentState();
      if (this_present_currentState || that_present_currentState) {
        if (!(this_present_currentState && that_present_currentState))
          return false;
        if (!this.currentState.equals(that.currentState))
          return false;
      }

      boolean this_present_move = true && this.isSetMove();
      boolean that_present_move = true && that.isSetMove();
      if (this_present_move || that_present_move) {
        if (!(this_present_move && that_present_move))
          return false;
        if (!this.move.equals(that.move))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makeMove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makeMove_args typedOther = (makeMove_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentState()).compareTo(typedOther.isSetCurrentState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentState, typedOther.currentState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMove()).compareTo(typedOther.isSetMove());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMove()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.move, typedOther.move);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeMove_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentState:");
      if (this.currentState == null) {
        sb.append("null");
      } else {
        sb.append(this.currentState);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("move:");
      if (this.move == null) {
        sb.append("null");
      } else {
        sb.append(this.move);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeMove_argsStandardSchemeFactory implements SchemeFactory {
      public makeMove_argsStandardScheme getScheme() {
        return new makeMove_argsStandardScheme();
      }
    }

    private static class makeMove_argsStandardScheme extends StandardScheme<makeMove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeMove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentState = new GameState();
                struct.currentState.read(iprot);
                struct.setCurrentStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MOVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.move = new MoveSubmission();
                struct.move.read(iprot);
                struct.setMoveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeMove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.currentState != null) {
          oprot.writeFieldBegin(CURRENT_STATE_FIELD_DESC);
          struct.currentState.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.move != null) {
          oprot.writeFieldBegin(MOVE_FIELD_DESC);
          struct.move.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeMove_argsTupleSchemeFactory implements SchemeFactory {
      public makeMove_argsTupleScheme getScheme() {
        return new makeMove_argsTupleScheme();
      }
    }

    private static class makeMove_argsTupleScheme extends TupleScheme<makeMove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeMove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentState()) {
          optionals.set(1);
        }
        if (struct.isSetMove()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetCurrentState()) {
          struct.currentState.write(oprot);
        }
        if (struct.isSetMove()) {
          struct.move.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeMove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentState = new GameState();
          struct.currentState.read(iprot);
          struct.setCurrentStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.move = new MoveSubmission();
          struct.move.read(iprot);
          struct.setMoveIsSet(true);
        }
      }
    }

  }

  public static class makeMove_result implements org.apache.thrift.TBase<makeMove_result, makeMove_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeMove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeMove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeMove_resultTupleSchemeFactory());
    }

    public GameState success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GameState.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeMove_result.class, metaDataMap);
    }

    public makeMove_result() {
    }

    public makeMove_result(
      GameState success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeMove_result(makeMove_result other) {
      if (other.isSetSuccess()) {
        this.success = new GameState(other.success);
      }
    }

    public makeMove_result deepCopy() {
      return new makeMove_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GameState getSuccess() {
      return this.success;
    }

    public makeMove_result setSuccess(GameState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GameState)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeMove_result)
        return this.equals((makeMove_result)that);
      return false;
    }

    public boolean equals(makeMove_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makeMove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makeMove_result typedOther = (makeMove_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeMove_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeMove_resultStandardSchemeFactory implements SchemeFactory {
      public makeMove_resultStandardScheme getScheme() {
        return new makeMove_resultStandardScheme();
      }
    }

    private static class makeMove_resultStandardScheme extends StandardScheme<makeMove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeMove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GameState();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeMove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeMove_resultTupleSchemeFactory implements SchemeFactory {
      public makeMove_resultTupleScheme getScheme() {
        return new makeMove_resultTupleScheme();
      }
    }

    private static class makeMove_resultTupleScheme extends TupleScheme<makeMove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeMove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeMove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GameState();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createMatchmakingGame_args implements org.apache.thrift.TBase<createMatchmakingGame_args, createMatchmakingGame_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchmakingGame_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchmakingGame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchmakingGame_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public NewGameParams params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      PARAMS((short)2, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewGameParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchmakingGame_args.class, metaDataMap);
    }

    public createMatchmakingGame_args() {
    }

    public createMatchmakingGame_args(
      String accessToken,
      NewGameParams params)
    {
      this();
      this.accessToken = accessToken;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchmakingGame_args(createMatchmakingGame_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetParams()) {
        this.params = new NewGameParams(other.params);
      }
    }

    public createMatchmakingGame_args deepCopy() {
      return new createMatchmakingGame_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      this.params = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public createMatchmakingGame_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public NewGameParams getParams() {
      return this.params;
    }

    public createMatchmakingGame_args setParams(NewGameParams params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((NewGameParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchmakingGame_args)
        return this.equals((createMatchmakingGame_args)that);
      return false;
    }

    public boolean equals(createMatchmakingGame_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createMatchmakingGame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createMatchmakingGame_args typedOther = (createMatchmakingGame_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchmakingGame_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchmakingGame_argsStandardSchemeFactory implements SchemeFactory {
      public createMatchmakingGame_argsStandardScheme getScheme() {
        return new createMatchmakingGame_argsStandardScheme();
      }
    }

    private static class createMatchmakingGame_argsStandardScheme extends StandardScheme<createMatchmakingGame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchmakingGame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new NewGameParams();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchmakingGame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchmakingGame_argsTupleSchemeFactory implements SchemeFactory {
      public createMatchmakingGame_argsTupleScheme getScheme() {
        return new createMatchmakingGame_argsTupleScheme();
      }
    }

    private static class createMatchmakingGame_argsTupleScheme extends TupleScheme<createMatchmakingGame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchmakingGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchmakingGame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.params = new NewGameParams();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class createMatchmakingGame_result implements org.apache.thrift.TBase<createMatchmakingGame_result, createMatchmakingGame_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMatchmakingGame_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMatchmakingGame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMatchmakingGame_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMatchmakingGame_result.class, metaDataMap);
    }

    public createMatchmakingGame_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMatchmakingGame_result(createMatchmakingGame_result other) {
    }

    public createMatchmakingGame_result deepCopy() {
      return new createMatchmakingGame_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMatchmakingGame_result)
        return this.equals((createMatchmakingGame_result)that);
      return false;
    }

    public boolean equals(createMatchmakingGame_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createMatchmakingGame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createMatchmakingGame_result typedOther = (createMatchmakingGame_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMatchmakingGame_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMatchmakingGame_resultStandardSchemeFactory implements SchemeFactory {
      public createMatchmakingGame_resultStandardScheme getScheme() {
        return new createMatchmakingGame_resultStandardScheme();
      }
    }

    private static class createMatchmakingGame_resultStandardScheme extends StandardScheme<createMatchmakingGame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMatchmakingGame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMatchmakingGame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMatchmakingGame_resultTupleSchemeFactory implements SchemeFactory {
      public createMatchmakingGame_resultTupleScheme getScheme() {
        return new createMatchmakingGame_resultTupleScheme();
      }
    }

    private static class createMatchmakingGame_resultTupleScheme extends TupleScheme<createMatchmakingGame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMatchmakingGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMatchmakingGame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendChatMessage_args implements org.apache.thrift.TBase<sendChatMessage_args, sendChatMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendChatMessage_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendChatMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendChatMessage_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public long gameId; // required
    public String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      GAME_ID((short)2, "gameId"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // GAME_ID
            return GAME_ID;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GAMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendChatMessage_args.class, metaDataMap);
    }

    public sendChatMessage_args() {
    }

    public sendChatMessage_args(
      String accessToken,
      long gameId,
      String message)
    {
      this();
      this.accessToken = accessToken;
      this.gameId = gameId;
      setGameIdIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatMessage_args(sendChatMessage_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.gameId = other.gameId;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public sendChatMessage_args deepCopy() {
      return new sendChatMessage_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setGameIdIsSet(false);
      this.gameId = 0;
      this.message = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public sendChatMessage_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public long getGameId() {
      return this.gameId;
    }

    public sendChatMessage_args setGameId(long gameId) {
      this.gameId = gameId;
      setGameIdIsSet(true);
      return this;
    }

    public void unsetGameId() {
      __isset_bit_vector.clear(__GAMEID_ISSET_ID);
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return __isset_bit_vector.get(__GAMEID_ISSET_ID);
    }

    public void setGameIdIsSet(boolean value) {
      __isset_bit_vector.set(__GAMEID_ISSET_ID, value);
    }

    public String getMessage() {
      return this.message;
    }

    public sendChatMessage_args setMessage(String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((Long)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case GAME_ID:
        return Long.valueOf(getGameId());

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case GAME_ID:
        return isSetGameId();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatMessage_args)
        return this.equals((sendChatMessage_args)that);
      return false;
    }

    public boolean equals(sendChatMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_gameId = true;
      boolean that_present_gameId = true;
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (this.gameId != that.gameId)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendChatMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendChatMessage_args typedOther = (sendChatMessage_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, typedOther.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendChatMessage_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameId:");
      sb.append(this.gameId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendChatMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendChatMessage_argsStandardScheme getScheme() {
        return new sendChatMessage_argsStandardScheme();
      }
    }

    private static class sendChatMessage_argsStandardScheme extends StandardScheme<sendChatMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendChatMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.gameId = iprot.readI64();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendChatMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeI64(struct.gameId);
        oprot.writeFieldEnd();
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendChatMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendChatMessage_argsTupleScheme getScheme() {
        return new sendChatMessage_argsTupleScheme();
      }
    }

    private static class sendChatMessage_argsTupleScheme extends TupleScheme<sendChatMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendChatMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetGameId()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetGameId()) {
          oprot.writeI64(struct.gameId);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendChatMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gameId = iprot.readI64();
          struct.setGameIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class sendChatMessage_result implements org.apache.thrift.TBase<sendChatMessage_result, sendChatMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendChatMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendChatMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendChatMessage_resultTupleSchemeFactory());
    }

    public ChatMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendChatMessage_result.class, metaDataMap);
    }

    public sendChatMessage_result() {
    }

    public sendChatMessage_result(
      ChatMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatMessage_result(sendChatMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChatMessage(other.success);
      }
    }

    public sendChatMessage_result deepCopy() {
      return new sendChatMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ChatMessage getSuccess() {
      return this.success;
    }

    public sendChatMessage_result setSuccess(ChatMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChatMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatMessage_result)
        return this.equals((sendChatMessage_result)that);
      return false;
    }

    public boolean equals(sendChatMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendChatMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendChatMessage_result typedOther = (sendChatMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendChatMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendChatMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendChatMessage_resultStandardScheme getScheme() {
        return new sendChatMessage_resultStandardScheme();
      }
    }

    private static class sendChatMessage_resultStandardScheme extends StandardScheme<sendChatMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendChatMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChatMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendChatMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendChatMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendChatMessage_resultTupleScheme getScheme() {
        return new sendChatMessage_resultTupleScheme();
      }
    }

    private static class sendChatMessage_resultTupleScheme extends TupleScheme<sendChatMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendChatMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendChatMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ChatMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUnseenChats_args implements org.apache.thrift.TBase<getUnseenChats_args, getUnseenChats_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnseenChats_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnseenChats_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnseenChats_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public long gameId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      GAME_ID((short)2, "gameId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // GAME_ID
            return GAME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GAMEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnseenChats_args.class, metaDataMap);
    }

    public getUnseenChats_args() {
    }

    public getUnseenChats_args(
      String accessToken,
      long gameId)
    {
      this();
      this.accessToken = accessToken;
      this.gameId = gameId;
      setGameIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnseenChats_args(getUnseenChats_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      this.gameId = other.gameId;
    }

    public getUnseenChats_args deepCopy() {
      return new getUnseenChats_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      setGameIdIsSet(false);
      this.gameId = 0;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public getUnseenChats_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public long getGameId() {
      return this.gameId;
    }

    public getUnseenChats_args setGameId(long gameId) {
      this.gameId = gameId;
      setGameIdIsSet(true);
      return this;
    }

    public void unsetGameId() {
      __isset_bit_vector.clear(__GAMEID_ISSET_ID);
    }

    /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
    public boolean isSetGameId() {
      return __isset_bit_vector.get(__GAMEID_ISSET_ID);
    }

    public void setGameIdIsSet(boolean value) {
      __isset_bit_vector.set(__GAMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case GAME_ID:
        if (value == null) {
          unsetGameId();
        } else {
          setGameId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case GAME_ID:
        return Long.valueOf(getGameId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case GAME_ID:
        return isSetGameId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnseenChats_args)
        return this.equals((getUnseenChats_args)that);
      return false;
    }

    public boolean equals(getUnseenChats_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_gameId = true;
      boolean that_present_gameId = true;
      if (this_present_gameId || that_present_gameId) {
        if (!(this_present_gameId && that_present_gameId))
          return false;
        if (this.gameId != that.gameId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUnseenChats_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUnseenChats_args typedOther = (getUnseenChats_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameId()).compareTo(typedOther.isSetGameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, typedOther.gameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnseenChats_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameId:");
      sb.append(this.gameId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnseenChats_argsStandardSchemeFactory implements SchemeFactory {
      public getUnseenChats_argsStandardScheme getScheme() {
        return new getUnseenChats_argsStandardScheme();
      }
    }

    private static class getUnseenChats_argsStandardScheme extends StandardScheme<getUnseenChats_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnseenChats_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.gameId = iprot.readI64();
                struct.setGameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnseenChats_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeI64(struct.gameId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnseenChats_argsTupleSchemeFactory implements SchemeFactory {
      public getUnseenChats_argsTupleScheme getScheme() {
        return new getUnseenChats_argsTupleScheme();
      }
    }

    private static class getUnseenChats_argsTupleScheme extends TupleScheme<getUnseenChats_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnseenChats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetGameId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetGameId()) {
          oprot.writeI64(struct.gameId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnseenChats_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gameId = iprot.readI64();
          struct.setGameIdIsSet(true);
        }
      }
    }

  }

  public static class getUnseenChats_result implements org.apache.thrift.TBase<getUnseenChats_result, getUnseenChats_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnseenChats_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUnseenChats_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUnseenChats_resultTupleSchemeFactory());
    }

    public List<ChatMessage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChatMessage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnseenChats_result.class, metaDataMap);
    }

    public getUnseenChats_result() {
    }

    public getUnseenChats_result(
      List<ChatMessage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnseenChats_result(getUnseenChats_result other) {
      if (other.isSetSuccess()) {
        List<ChatMessage> __this__success = new ArrayList<ChatMessage>();
        for (ChatMessage other_element : other.success) {
          __this__success.add(new ChatMessage(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUnseenChats_result deepCopy() {
      return new getUnseenChats_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ChatMessage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ChatMessage elem) {
      if (this.success == null) {
        this.success = new ArrayList<ChatMessage>();
      }
      this.success.add(elem);
    }

    public List<ChatMessage> getSuccess() {
      return this.success;
    }

    public getUnseenChats_result setSuccess(List<ChatMessage> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ChatMessage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnseenChats_result)
        return this.equals((getUnseenChats_result)that);
      return false;
    }

    public boolean equals(getUnseenChats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getUnseenChats_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getUnseenChats_result typedOther = (getUnseenChats_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUnseenChats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnseenChats_resultStandardSchemeFactory implements SchemeFactory {
      public getUnseenChats_resultStandardScheme getScheme() {
        return new getUnseenChats_resultStandardScheme();
      }
    }

    private static class getUnseenChats_resultStandardScheme extends StandardScheme<getUnseenChats_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnseenChats_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.success = new ArrayList<ChatMessage>(_list110.size);
                  for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                  {
                    ChatMessage _elem112; // required
                    _elem112 = new ChatMessage();
                    _elem112.read(iprot);
                    struct.success.add(_elem112);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnseenChats_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ChatMessage _iter113 : struct.success)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnseenChats_resultTupleSchemeFactory implements SchemeFactory {
      public getUnseenChats_resultTupleScheme getScheme() {
        return new getUnseenChats_resultTupleScheme();
      }
    }

    private static class getUnseenChats_resultTupleScheme extends TupleScheme<getUnseenChats_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnseenChats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ChatMessage _iter114 : struct.success)
            {
              _iter114.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnseenChats_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ChatMessage>(_list115.size);
            for (int _i116 = 0; _i116 < _list115.size; ++_i116)
            {
              ChatMessage _elem117; // required
              _elem117 = new ChatMessage();
              _elem117.read(iprot);
              struct.success.add(_elem117);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dictionaryLookup_args implements org.apache.thrift.TBase<dictionaryLookup_args, dictionaryLookup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dictionaryLookup_args");

    private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("words", org.apache.thrift.protocol.TType.SET, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dictionaryLookup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dictionaryLookup_argsTupleSchemeFactory());
    }

    public String accessToken; // required
    public Set<String> words; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCESS_TOKEN((short)1, "accessToken"),
      WORDS((short)2, "words");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCESS_TOKEN
            return ACCESS_TOKEN;
          case 2: // WORDS
            return WORDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WORDS, new org.apache.thrift.meta_data.FieldMetaData("words", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dictionaryLookup_args.class, metaDataMap);
    }

    public dictionaryLookup_args() {
    }

    public dictionaryLookup_args(
      String accessToken,
      Set<String> words)
    {
      this();
      this.accessToken = accessToken;
      this.words = words;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dictionaryLookup_args(dictionaryLookup_args other) {
      if (other.isSetAccessToken()) {
        this.accessToken = other.accessToken;
      }
      if (other.isSetWords()) {
        Set<String> __this__words = new HashSet<String>();
        for (String other_element : other.words) {
          __this__words.add(other_element);
        }
        this.words = __this__words;
      }
    }

    public dictionaryLookup_args deepCopy() {
      return new dictionaryLookup_args(this);
    }

    @Override
    public void clear() {
      this.accessToken = null;
      this.words = null;
    }

    public String getAccessToken() {
      return this.accessToken;
    }

    public dictionaryLookup_args setAccessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    public void unsetAccessToken() {
      this.accessToken = null;
    }

    /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessToken() {
      return this.accessToken != null;
    }

    public void setAccessTokenIsSet(boolean value) {
      if (!value) {
        this.accessToken = null;
      }
    }

    public int getWordsSize() {
      return (this.words == null) ? 0 : this.words.size();
    }

    public java.util.Iterator<String> getWordsIterator() {
      return (this.words == null) ? null : this.words.iterator();
    }

    public void addToWords(String elem) {
      if (this.words == null) {
        this.words = new HashSet<String>();
      }
      this.words.add(elem);
    }

    public Set<String> getWords() {
      return this.words;
    }

    public dictionaryLookup_args setWords(Set<String> words) {
      this.words = words;
      return this;
    }

    public void unsetWords() {
      this.words = null;
    }

    /** Returns true if field words is set (has been assigned a value) and false otherwise */
    public boolean isSetWords() {
      return this.words != null;
    }

    public void setWordsIsSet(boolean value) {
      if (!value) {
        this.words = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCESS_TOKEN:
        if (value == null) {
          unsetAccessToken();
        } else {
          setAccessToken((String)value);
        }
        break;

      case WORDS:
        if (value == null) {
          unsetWords();
        } else {
          setWords((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCESS_TOKEN:
        return getAccessToken();

      case WORDS:
        return getWords();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCESS_TOKEN:
        return isSetAccessToken();
      case WORDS:
        return isSetWords();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dictionaryLookup_args)
        return this.equals((dictionaryLookup_args)that);
      return false;
    }

    public boolean equals(dictionaryLookup_args that) {
      if (that == null)
        return false;

      boolean this_present_accessToken = true && this.isSetAccessToken();
      boolean that_present_accessToken = true && that.isSetAccessToken();
      if (this_present_accessToken || that_present_accessToken) {
        if (!(this_present_accessToken && that_present_accessToken))
          return false;
        if (!this.accessToken.equals(that.accessToken))
          return false;
      }

      boolean this_present_words = true && this.isSetWords();
      boolean that_present_words = true && that.isSetWords();
      if (this_present_words || that_present_words) {
        if (!(this_present_words && that_present_words))
          return false;
        if (!this.words.equals(that.words))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dictionaryLookup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dictionaryLookup_args typedOther = (dictionaryLookup_args)other;

      lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(typedOther.isSetAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, typedOther.accessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWords()).compareTo(typedOther.isSetWords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.words, typedOther.words);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dictionaryLookup_args(");
      boolean first = true;

      sb.append("accessToken:");
      if (this.accessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.accessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("words:");
      if (this.words == null) {
        sb.append("null");
      } else {
        sb.append(this.words);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dictionaryLookup_argsStandardSchemeFactory implements SchemeFactory {
      public dictionaryLookup_argsStandardScheme getScheme() {
        return new dictionaryLookup_argsStandardScheme();
      }
    }

    private static class dictionaryLookup_argsStandardScheme extends StandardScheme<dictionaryLookup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dictionaryLookup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCESS_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accessToken = iprot.readString();
                struct.setAccessTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set118 = iprot.readSetBegin();
                  struct.words = new HashSet<String>(2*_set118.size);
                  for (int _i119 = 0; _i119 < _set118.size; ++_i119)
                  {
                    String _elem120; // required
                    _elem120 = iprot.readString();
                    struct.words.add(_elem120);
                  }
                  iprot.readSetEnd();
                }
                struct.setWordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dictionaryLookup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.accessToken != null) {
          oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
          oprot.writeString(struct.accessToken);
          oprot.writeFieldEnd();
        }
        if (struct.words != null) {
          oprot.writeFieldBegin(WORDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.words.size()));
            for (String _iter121 : struct.words)
            {
              oprot.writeString(_iter121);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dictionaryLookup_argsTupleSchemeFactory implements SchemeFactory {
      public dictionaryLookup_argsTupleScheme getScheme() {
        return new dictionaryLookup_argsTupleScheme();
      }
    }

    private static class dictionaryLookup_argsTupleScheme extends TupleScheme<dictionaryLookup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dictionaryLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccessToken()) {
          optionals.set(0);
        }
        if (struct.isSetWords()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccessToken()) {
          oprot.writeString(struct.accessToken);
        }
        if (struct.isSetWords()) {
          {
            oprot.writeI32(struct.words.size());
            for (String _iter122 : struct.words)
            {
              oprot.writeString(_iter122);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dictionaryLookup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.accessToken = iprot.readString();
          struct.setAccessTokenIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TSet _set123 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.words = new HashSet<String>(2*_set123.size);
            for (int _i124 = 0; _i124 < _set123.size; ++_i124)
            {
              String _elem125; // required
              _elem125 = iprot.readString();
              struct.words.add(_elem125);
            }
          }
          struct.setWordsIsSet(true);
        }
      }
    }

  }

  public static class dictionaryLookup_result implements org.apache.thrift.TBase<dictionaryLookup_result, dictionaryLookup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dictionaryLookup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dictionaryLookup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dictionaryLookup_resultTupleSchemeFactory());
    }

    public Set<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dictionaryLookup_result.class, metaDataMap);
    }

    public dictionaryLookup_result() {
    }

    public dictionaryLookup_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dictionaryLookup_result(dictionaryLookup_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public dictionaryLookup_result deepCopy() {
      return new dictionaryLookup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public dictionaryLookup_result setSuccess(Set<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dictionaryLookup_result)
        return this.equals((dictionaryLookup_result)that);
      return false;
    }

    public boolean equals(dictionaryLookup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dictionaryLookup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dictionaryLookup_result typedOther = (dictionaryLookup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dictionaryLookup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dictionaryLookup_resultStandardSchemeFactory implements SchemeFactory {
      public dictionaryLookup_resultStandardScheme getScheme() {
        return new dictionaryLookup_resultStandardScheme();
      }
    }

    private static class dictionaryLookup_resultStandardScheme extends StandardScheme<dictionaryLookup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dictionaryLookup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set126 = iprot.readSetBegin();
                  struct.success = new HashSet<String>(2*_set126.size);
                  for (int _i127 = 0; _i127 < _set126.size; ++_i127)
                  {
                    String _elem128; // required
                    _elem128 = iprot.readString();
                    struct.success.add(_elem128);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dictionaryLookup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter129 : struct.success)
            {
              oprot.writeString(_iter129);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dictionaryLookup_resultTupleSchemeFactory implements SchemeFactory {
      public dictionaryLookup_resultTupleScheme getScheme() {
        return new dictionaryLookup_resultTupleScheme();
      }
    }

    private static class dictionaryLookup_resultTupleScheme extends TupleScheme<dictionaryLookup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dictionaryLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter130 : struct.success)
            {
              oprot.writeString(_iter130);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dictionaryLookup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set131 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashSet<String>(2*_set131.size);
            for (int _i132 = 0; _i132 < _set131.size; ++_i132)
            {
              String _elem133; // required
              _elem133 = iprot.readString();
              struct.success.add(_elem133);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
