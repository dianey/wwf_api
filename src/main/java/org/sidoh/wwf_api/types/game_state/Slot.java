/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.game_state;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Slot implements org.apache.thrift.TBase<Slot, Slot._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Slot");

  private static final org.apache.thrift.protocol.TField MODIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("modifier", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TILE_FIELD_DESC = new org.apache.thrift.protocol.TField("tile", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SlotStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SlotTupleSchemeFactory());
  }

  /**
   * A slot can have a modifier
   * 
   * @see SlotModifier
   */
  public SlotModifier modifier; // required
  /**
   * A slot can have a tile placed on it (but won't always have one)
   */
  public Tile tile; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A slot can have a modifier
     * 
     * @see SlotModifier
     */
    MODIFIER((short)1, "modifier"),
    /**
     * A slot can have a tile placed on it (but won't always have one)
     */
    TILE((short)2, "tile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODIFIER
          return MODIFIER;
        case 2: // TILE
          return TILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TILE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODIFIER, new org.apache.thrift.meta_data.FieldMetaData("modifier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SlotModifier.class)));
    tmpMap.put(_Fields.TILE, new org.apache.thrift.meta_data.FieldMetaData("tile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tile.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Slot.class, metaDataMap);
  }

  public Slot() {
  }

  public Slot(
    SlotModifier modifier)
  {
    this();
    this.modifier = modifier;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Slot(Slot other) {
    if (other.isSetModifier()) {
      this.modifier = other.modifier;
    }
    if (other.isSetTile()) {
      this.tile = new Tile(other.tile);
    }
  }

  public Slot deepCopy() {
    return new Slot(this);
  }

  @Override
  public void clear() {
    this.modifier = null;
    this.tile = null;
  }

  /**
   * A slot can have a modifier
   * 
   * @see SlotModifier
   */
  public SlotModifier getModifier() {
    return this.modifier;
  }

  /**
   * A slot can have a modifier
   * 
   * @see SlotModifier
   */
  public Slot setModifier(SlotModifier modifier) {
    this.modifier = modifier;
    return this;
  }

  public void unsetModifier() {
    this.modifier = null;
  }

  /** Returns true if field modifier is set (has been assigned a value) and false otherwise */
  public boolean isSetModifier() {
    return this.modifier != null;
  }

  public void setModifierIsSet(boolean value) {
    if (!value) {
      this.modifier = null;
    }
  }

  /**
   * A slot can have a tile placed on it (but won't always have one)
   */
  public Tile getTile() {
    return this.tile;
  }

  /**
   * A slot can have a tile placed on it (but won't always have one)
   */
  public Slot setTile(Tile tile) {
    this.tile = tile;
    return this;
  }

  public void unsetTile() {
    this.tile = null;
  }

  /** Returns true if field tile is set (has been assigned a value) and false otherwise */
  public boolean isSetTile() {
    return this.tile != null;
  }

  public void setTileIsSet(boolean value) {
    if (!value) {
      this.tile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODIFIER:
      if (value == null) {
        unsetModifier();
      } else {
        setModifier((SlotModifier)value);
      }
      break;

    case TILE:
      if (value == null) {
        unsetTile();
      } else {
        setTile((Tile)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODIFIER:
      return getModifier();

    case TILE:
      return getTile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODIFIER:
      return isSetModifier();
    case TILE:
      return isSetTile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Slot)
      return this.equals((Slot)that);
    return false;
  }

  public boolean equals(Slot that) {
    if (that == null)
      return false;

    boolean this_present_modifier = true && this.isSetModifier();
    boolean that_present_modifier = true && that.isSetModifier();
    if (this_present_modifier || that_present_modifier) {
      if (!(this_present_modifier && that_present_modifier))
        return false;
      if (!this.modifier.equals(that.modifier))
        return false;
    }

    boolean this_present_tile = true && this.isSetTile();
    boolean that_present_tile = true && that.isSetTile();
    if (this_present_tile || that_present_tile) {
      if (!(this_present_tile && that_present_tile))
        return false;
      if (!this.tile.equals(that.tile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Slot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Slot typedOther = (Slot)other;

    lastComparison = Boolean.valueOf(isSetModifier()).compareTo(typedOther.isSetModifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifier, typedOther.modifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTile()).compareTo(typedOther.isSetTile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tile, typedOther.tile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Slot(");
    boolean first = true;

    sb.append("modifier:");
    if (this.modifier == null) {
      sb.append("null");
    } else {
      sb.append(this.modifier);
    }
    first = false;
    if (isSetTile()) {
      if (!first) sb.append(", ");
      sb.append("tile:");
      if (this.tile == null) {
        sb.append("null");
      } else {
        sb.append(this.tile);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (modifier == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'modifier' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SlotStandardSchemeFactory implements SchemeFactory {
    public SlotStandardScheme getScheme() {
      return new SlotStandardScheme();
    }
  }

  private static class SlotStandardScheme extends StandardScheme<Slot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Slot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modifier = SlotModifier.findByValue(iprot.readI32());
              struct.setModifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tile = new Tile();
              struct.tile.read(iprot);
              struct.setTileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Slot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.modifier != null) {
        oprot.writeFieldBegin(MODIFIER_FIELD_DESC);
        oprot.writeI32(struct.modifier.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tile != null) {
        if (struct.isSetTile()) {
          oprot.writeFieldBegin(TILE_FIELD_DESC);
          struct.tile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SlotTupleSchemeFactory implements SchemeFactory {
    public SlotTupleScheme getScheme() {
      return new SlotTupleScheme();
    }
  }

  private static class SlotTupleScheme extends TupleScheme<Slot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Slot struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.modifier.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTile()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTile()) {
        struct.tile.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Slot struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.modifier = SlotModifier.findByValue(iprot.readI32());
      struct.setModifierIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.tile = new Tile();
        struct.tile.read(iprot);
        struct.setTileIsSet(true);
      }
    }
  }

}

