/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.wwf_api.types.game_state;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Rack implements org.apache.thrift.TBase<Rack, Rack._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Rack");

  private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TILES_FIELD_DESC = new org.apache.thrift.protocol.TField("tiles", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RackStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RackTupleSchemeFactory());
  }

  /**
   * The maximum number of tiles for this rack
   */
  public int capacity; // required
  /**
   * A list of tiles associated with this rack
   */
  public List<Tile> tiles; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The maximum number of tiles for this rack
     */
    CAPACITY((short)1, "capacity"),
    /**
     * A list of tiles associated with this rack
     */
    TILES((short)2, "tiles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAPACITY
          return CAPACITY;
        case 2: // TILES
          return TILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAPACITY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TILES, new org.apache.thrift.meta_data.FieldMetaData("tiles", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tile.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Rack.class, metaDataMap);
  }

  public Rack() {
  }

  public Rack(
    int capacity,
    List<Tile> tiles)
  {
    this();
    this.capacity = capacity;
    setCapacityIsSet(true);
    this.tiles = tiles;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Rack(Rack other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.capacity = other.capacity;
    if (other.isSetTiles()) {
      List<Tile> __this__tiles = new ArrayList<Tile>();
      for (Tile other_element : other.tiles) {
        __this__tiles.add(new Tile(other_element));
      }
      this.tiles = __this__tiles;
    }
  }

  public Rack deepCopy() {
    return new Rack(this);
  }

  @Override
  public void clear() {
    setCapacityIsSet(false);
    this.capacity = 0;
    this.tiles = null;
  }

  /**
   * The maximum number of tiles for this rack
   */
  public int getCapacity() {
    return this.capacity;
  }

  /**
   * The maximum number of tiles for this rack
   */
  public Rack setCapacity(int capacity) {
    this.capacity = capacity;
    setCapacityIsSet(true);
    return this;
  }

  public void unsetCapacity() {
    __isset_bit_vector.clear(__CAPACITY_ISSET_ID);
  }

  /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
  public boolean isSetCapacity() {
    return __isset_bit_vector.get(__CAPACITY_ISSET_ID);
  }

  public void setCapacityIsSet(boolean value) {
    __isset_bit_vector.set(__CAPACITY_ISSET_ID, value);
  }

  public int getTilesSize() {
    return (this.tiles == null) ? 0 : this.tiles.size();
  }

  public java.util.Iterator<Tile> getTilesIterator() {
    return (this.tiles == null) ? null : this.tiles.iterator();
  }

  public void addToTiles(Tile elem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<Tile>();
    }
    this.tiles.add(elem);
  }

  /**
   * A list of tiles associated with this rack
   */
  public List<Tile> getTiles() {
    return this.tiles;
  }

  /**
   * A list of tiles associated with this rack
   */
  public Rack setTiles(List<Tile> tiles) {
    this.tiles = tiles;
    return this;
  }

  public void unsetTiles() {
    this.tiles = null;
  }

  /** Returns true if field tiles is set (has been assigned a value) and false otherwise */
  public boolean isSetTiles() {
    return this.tiles != null;
  }

  public void setTilesIsSet(boolean value) {
    if (!value) {
      this.tiles = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAPACITY:
      if (value == null) {
        unsetCapacity();
      } else {
        setCapacity((Integer)value);
      }
      break;

    case TILES:
      if (value == null) {
        unsetTiles();
      } else {
        setTiles((List<Tile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAPACITY:
      return Integer.valueOf(getCapacity());

    case TILES:
      return getTiles();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAPACITY:
      return isSetCapacity();
    case TILES:
      return isSetTiles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Rack)
      return this.equals((Rack)that);
    return false;
  }

  public boolean equals(Rack that) {
    if (that == null)
      return false;

    boolean this_present_capacity = true;
    boolean that_present_capacity = true;
    if (this_present_capacity || that_present_capacity) {
      if (!(this_present_capacity && that_present_capacity))
        return false;
      if (this.capacity != that.capacity)
        return false;
    }

    boolean this_present_tiles = true && this.isSetTiles();
    boolean that_present_tiles = true && that.isSetTiles();
    if (this_present_tiles || that_present_tiles) {
      if (!(this_present_tiles && that_present_tiles))
        return false;
      if (!this.tiles.equals(that.tiles))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Rack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Rack typedOther = (Rack)other;

    lastComparison = Boolean.valueOf(isSetCapacity()).compareTo(typedOther.isSetCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, typedOther.capacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTiles()).compareTo(typedOther.isSetTiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tiles, typedOther.tiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Rack(");
    boolean first = true;

    sb.append("capacity:");
    sb.append(this.capacity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tiles:");
    if (this.tiles == null) {
      sb.append("null");
    } else {
      sb.append(this.tiles);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'capacity' because it's a primitive and you chose the non-beans generator.
    if (tiles == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tiles' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RackStandardSchemeFactory implements SchemeFactory {
    public RackStandardScheme getScheme() {
      return new RackStandardScheme();
    }
  }

  private static class RackStandardScheme extends StandardScheme<Rack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Rack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capacity = iprot.readI32();
              struct.setCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tiles = new ArrayList<Tile>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Tile _elem2; // required
                  _elem2 = new Tile();
                  _elem2.read(iprot);
                  struct.tiles.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCapacity()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'capacity' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Rack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
      oprot.writeI32(struct.capacity);
      oprot.writeFieldEnd();
      if (struct.tiles != null) {
        oprot.writeFieldBegin(TILES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tiles.size()));
          for (Tile _iter3 : struct.tiles)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RackTupleSchemeFactory implements SchemeFactory {
    public RackTupleScheme getScheme() {
      return new RackTupleScheme();
    }
  }

  private static class RackTupleScheme extends TupleScheme<Rack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Rack struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.capacity);
      {
        oprot.writeI32(struct.tiles.size());
        for (Tile _iter4 : struct.tiles)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Rack struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.capacity = iprot.readI32();
      struct.setCapacityIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tiles = new ArrayList<Tile>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          Tile _elem7; // required
          _elem7 = new Tile();
          _elem7.read(iprot);
          struct.tiles.add(_elem7);
        }
      }
      struct.setTilesIsSet(true);
    }
  }

}

